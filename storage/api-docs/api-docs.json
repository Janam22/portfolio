{
    "openapi": "3.0.0",
    "info": {
        "title": "Knockdoor API",
        "description": "This is the API documentation for Knockdoor API",
        "version": "1.0.0"
    },
    "paths": {
        "/api/v1/auth/verify-phone": {
            "post": {
                "tags": [
                    "Customer Authentication"
                ],
                "summary": "For customer phone or email verification",
                "description": "Customer phone or email verification using OTP.",
                "operationId": "verifyPhoneOrEmail",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "otp",
                                    "verification_type",
                                    "login_type"
                                ],
                                "properties": {
                                    "otp": {
                                        "description": "The OTP sent to the phone or email.",
                                        "type": "string",
                                        "example": "123456"
                                    },
                                    "verification_type": {
                                        "description": "The type of verification (phone or email).",
                                        "type": "string",
                                        "enum": [
                                            "phone",
                                            "email"
                                        ]
                                    },
                                    "phone": {
                                        "description": "The phone number to verify (required if verification_type is 'phone').",
                                        "type": "string",
                                        "example": "+1234567890"
                                    },
                                    "email": {
                                        "description": "The email to verify (required if verification_type is 'email').",
                                        "type": "string",
                                        "example": "user@example.com"
                                    },
                                    "login_type": {
                                        "description": "The login type (manual or OTP).",
                                        "type": "string",
                                        "enum": [
                                            "manual",
                                            "otp"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Verification successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "Access token for authenticated user.",
                                            "type": "string",
                                            "example": "access_token_here"
                                        },
                                        "is_phone_verified": {
                                            "description": "Indicates if the phone is verified.",
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "is_email_verified": {
                                            "description": "Indicates if the email is verified.",
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "is_personal_info": {
                                            "description": "Indicates if personal information is available.",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "is_exist_user": {
                                            "description": "Indicates if the user already exists.",
                                            "type": "boolean",
                                            "example": null
                                        },
                                        "login_type": {
                                            "description": "The login type used.",
                                            "type": "string",
                                            "example": "manual"
                                        },
                                        "email": {
                                            "description": "The email of the user, if available.",
                                            "type": "string",
                                            "example": "user@example.com"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "otp_block_time"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Please try again after 10 minutes."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "OTP does not match or user not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "OTP does not match."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Too many attempts.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "otp_temp_blocked"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Too many attempts."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/firebase-verify-token": {
            "post": {
                "tags": [
                    "Customer Authentication"
                ],
                "summary": "Customer Firebase Authentication Verification",
                "description": "This endpoint verifies Firebase authentication for customers using a session info, phone number, OTP, and login type.",
                "operationId": "b97a778c59ae336c8364bdd50711f4e6",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "session_info": {
                                        "description": "Session info obtained from Firebase.",
                                        "type": "string"
                                    },
                                    "phone": {
                                        "description": "Phone number of the customer.",
                                        "type": "string"
                                    },
                                    "otp": {
                                        "description": "OTP code sent to the customer's phone.",
                                        "type": "string"
                                    },
                                    "login_type": {
                                        "description": "Type of login being performed (manual or OTP).",
                                        "type": "string",
                                        "enum": [
                                            "manual",
                                            "otp"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Authentication successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "Access token for authenticated user.",
                                            "type": "string"
                                        },
                                        "is_phone_verified": {
                                            "description": "Indicates if the phone is verified.",
                                            "type": "boolean"
                                        },
                                        "is_email_verified": {
                                            "description": "Indicates if the email is verified.",
                                            "type": "boolean"
                                        },
                                        "is_personal_info": {
                                            "description": "Indicates if personal information is complete.",
                                            "type": "boolean"
                                        },
                                        "is_exist_user": {
                                            "description": "Indicates if the user already exists.",
                                            "type": "boolean"
                                        },
                                        "login_type": {
                                            "description": "The login type used.",
                                            "type": "string"
                                        },
                                        "email": {
                                            "description": "Email of the user, if available.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or Firebase authentication failed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "description": "Error message.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/sign-up": {
            "post": {
                "tags": [
                    "Customer Authentication"
                ],
                "summary": "Customer Sign Up",
                "description": "Allows a new customer to register by providing required details such as name, email, phone, and password. Optional referral code can be used for benefits.",
                "operationId": "d260608b4e4a615407c4abb2020c1975",
                "parameters": [
                    {
                        "name": "Content-Type",
                        "in": "header",
                        "description": "Content-Type header",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "application/json"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "phone",
                                    "password"
                                ],
                                "properties": {
                                    "name": {
                                        "description": "Full name of the user",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "Email address of the user (unique)",
                                        "type": "string",
                                        "example": "user@example.com"
                                    },
                                    "phone": {
                                        "description": "Phone number of the user (unique)",
                                        "type": "string",
                                        "example": "1234567890"
                                    },
                                    "password": {
                                        "description": "Password for the account (minimum 8 characters)",
                                        "type": "string",
                                        "example": "password123"
                                    },
                                    "ref_code": {
                                        "description": "Optional referral code",
                                        "type": "string",
                                        "example": "REF123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Registration successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "Access token for the registered user",
                                            "type": "string"
                                        },
                                        "is_phone_verified": {
                                            "description": "Indicates if phone verification is required",
                                            "type": "boolean"
                                        },
                                        "is_email_verified": {
                                            "description": "Indicates if email verification is required",
                                            "type": "boolean"
                                        },
                                        "is_personal_info": {
                                            "description": "Indicates if personal info is complete",
                                            "type": "boolean"
                                        },
                                        "is_exist_user": {
                                            "description": "Indicates if the user already exists",
                                            "type": "boolean"
                                        },
                                        "login_type": {
                                            "description": "Type of login used",
                                            "type": "string"
                                        },
                                        "email": {
                                            "description": "Email of the user",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors or referral code disabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Failed due to OTP restrictions or referral code issues",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "203": {
                        "description": "Referral code already used",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": []
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "tags": [
                    "Customer Authentication"
                ],
                "summary": "Customer login",
                "description": "Login a customer using manual, OTP, or social login methods.",
                "operationId": "2e85880e1a6b8b4e121797fb5bdb03c3",
                "parameters": [
                    {
                        "name": "login_type",
                        "in": "query",
                        "description": "Type of login (manual, otp, social)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "manual",
                                "otp",
                                "social"
                            ]
                        }
                    },
                    {
                        "name": "email_or_phone",
                        "in": "query",
                        "description": "Email or phone number (required for manual login)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "Password (required for manual login)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "field_type",
                        "in": "query",
                        "description": "Field type (required for manual login)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "phone",
                                "email"
                            ]
                        }
                    },
                    {
                        "name": "phone",
                        "in": "query",
                        "description": "Phone number (required for OTP login)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "otp",
                        "in": "query",
                        "description": "OTP (required for OTP login when verified)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Token (required for social login)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "unique_id",
                        "in": "query",
                        "description": "Unique ID (required for social login)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Email (required for social login with Google or Facebook)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "medium",
                        "in": "query",
                        "description": "Social login medium",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "google",
                                "facebook",
                                "apple"
                            ]
                        }
                    },
                    {
                        "name": "verified",
                        "in": "query",
                        "description": "Verification status (optional)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Login successful"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/update-info": {
            "post": {
                "tags": [
                    "Customer Authentication"
                ],
                "summary": "Update customer information",
                "description": "Allows a customer to update their information, including name, phone, email, and referral code.",
                "operationId": "2290576d4311e9950415addc260190d7",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Full name of the user",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "login_type": {
                                        "description": "Login type",
                                        "type": "string",
                                        "enum": [
                                            "otp",
                                            "social"
                                        ],
                                        "example": "otp"
                                    },
                                    "phone": {
                                        "description": "Phone number",
                                        "type": "string",
                                        "example": "1234567890"
                                    },
                                    "email": {
                                        "description": "Email address",
                                        "type": "string",
                                        "example": "john.doe@example.com"
                                    },
                                    "ref_code": {
                                        "description": "Referral code (optional)",
                                        "type": "string",
                                        "example": "REF12345"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Customer information updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "type": "string",
                                            "example": "access_token"
                                        },
                                        "is_phone_verified": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "is_email_verified": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "is_personal_info": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "is_exist_user": {
                                            "type": "boolean",
                                            "example": null
                                        },
                                        "login_type": {
                                            "type": "string",
                                            "example": "otp"
                                        },
                                        "email": {
                                            "type": "string",
                                            "example": "john.doe@example.com"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Referral code not found or invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "203": {
                        "description": "Referral code already used",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/professional-man/forgot-password": {
            "post": {
                "tags": [
                    "Professionalman authentication"
                ],
                "summary": "Request Password Reset for Professional Man",
                "description": "This endpoint allows a professional man to request a password reset. An OTP will be sent to the registered phone number and/or email.",
                "operationId": "cbee9f433070d76dd64a47b67dec09fe",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "phone"
                                ],
                                "properties": {
                                    "phone": {
                                        "description": "The phone number of the professional man in E.164 format.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OTP successfully sent.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "OTP successfully sent to your phone and/or mail."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "validation"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The phone field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Phone number not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "not-found"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Phone number not found!"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "OTP request too soon.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "otp"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Please try again after 60 seconds."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/professional-man/verify-token": {
            "post": {
                "tags": [
                    "Professionalman authentication"
                ],
                "summary": "Verify token for password reset",
                "description": "Endpoint to verify the reset token for the professional man password reset process.",
                "operationId": "a8a9a0268013e9d1bdda5a42da14aada",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "phone": {
                                        "description": "Phone number of the professional man.",
                                        "type": "string",
                                        "example": "1234567890"
                                    },
                                    "reset_token": {
                                        "description": "Reset token sent to the user.",
                                        "type": "string",
                                        "example": "123456"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Token verified successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Token found, you can proceed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "reset_token"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Invalid token."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "validation_error"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Phone is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Phone number not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "not-found"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Phone number not found!"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Too many attempts or blocked temporarily.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "otp_temp_blocked"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Too many attempts."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/professional-man/reset-password": {
            "put": {
                "tags": [
                    "Professionalman authentication"
                ],
                "summary": "Reset password for professional man",
                "description": "Allows a professional man to reset their password using a reset token.",
                "operationId": "d4658ccf5f7ecb92cdaae1974250054f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "phone",
                                    "reset_token",
                                    "password",
                                    "confirm_password"
                                ],
                                "properties": {
                                    "phone": {
                                        "description": "The phone number of the professional man.",
                                        "type": "string",
                                        "example": "9876543210"
                                    },
                                    "reset_token": {
                                        "description": "The token sent to the professional man's email or phone for password reset.",
                                        "type": "string",
                                        "example": "123456"
                                    },
                                    "password": {
                                        "description": "The new password.",
                                        "type": "string",
                                        "example": "Strong@123"
                                    },
                                    "confirm_password": {
                                        "description": "The confirmation of the new password, must match the password.",
                                        "type": "string",
                                        "example": "Strong@123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password changed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password changed successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "invalid"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Invalid token."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Password mismatch.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "mismatch"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Password didn't match!"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "validation_error"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The phone field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/professional-man/firebase-verify-token": {
            "post": {
                "tags": [
                    "Professionalman authentication"
                ],
                "summary": "Verify Firebase token for professional man",
                "description": "Allows a professional man to verify their Firebase token using session info, phone number, and code.",
                "operationId": "b7f7c60d4ed73e91fab1d447b02b7cad",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "sessionInfo",
                                    "phoneNumber",
                                    "code"
                                ],
                                "properties": {
                                    "sessionInfo": {
                                        "description": "Session info obtained during Firebase authentication.",
                                        "type": "string",
                                        "example": "SESSION_INFO_STRING"
                                    },
                                    "phoneNumber": {
                                        "description": "The phone number of the professional man.",
                                        "type": "string",
                                        "example": "9876543210"
                                    },
                                    "code": {
                                        "description": "The verification code sent to the user's phone.",
                                        "type": "string",
                                        "example": "123456"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Token found, you can proceed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Token found, you can proceed."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors or Firebase authentication error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "403"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "INVALID_SESSION_INFO"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/forgot-password": {
            "post": {
                "tags": [
                    "Customer Authentication"
                ],
                "summary": "Request Password Reset OTP",
                "description": "Send an OTP to the user's phone number for password reset.",
                "operationId": "a58f126d3a87d3fb7384c06f89f22027",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "phone": {
                                        "description": "The phone number of the user requesting the password reset.",
                                        "type": "string",
                                        "example": "9876543210"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OTP sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Otp_Successfully_Sent_To_Your_Phone"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "validation_error"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The phone field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Phone number not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "not-found"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Phone_number_not_found!"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Failed to send OTP or try again later",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "otp"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Please try again after 30 seconds."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/verify-token": {
            "post": {
                "tags": [
                    "Customer Authentication"
                ],
                "summary": "Verify OTP Token",
                "description": "Endpoint to verify the OTP token sent to the user's phone.",
                "operationId": "a116a08433c85adae955e34f8496454d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "phone",
                                    "reset_token"
                                ],
                                "properties": {
                                    "phone": {
                                        "description": "The phone number of the user, must be at least 9 characters.",
                                        "type": "string"
                                    },
                                    "reset_token": {
                                        "description": "The OTP reset token sent to the user's phone.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OTP verified successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "OTP found, you can proceed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid OTP.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "invalid"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Invalid OTP."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "field": {
                                                        "type": "string",
                                                        "example": "phone"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The phone field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Phone number not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "not-found"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Phone number not found!"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Too many attempts or temporary block.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "otp_temp_blocked"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Too many attempts"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/reset-password": {
            "put": {
                "tags": [
                    "Customer Authentication"
                ],
                "summary": "Reset Password",
                "description": "Allows a customer to reset their password using a reset token.",
                "operationId": "6f93fb942769d32c6bd839c81f506643",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "phone",
                                    "reset_token",
                                    "password",
                                    "confirm_password"
                                ],
                                "properties": {
                                    "phone": {
                                        "description": "The phone number of the user, must be valid and exist in the database.",
                                        "type": "string"
                                    },
                                    "reset_token": {
                                        "description": "The OTP reset token sent to the user's phone.",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "The new password for the user, must be at least 8 characters long.",
                                        "type": "string"
                                    },
                                    "confirm_password": {
                                        "description": "Must match the new password.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password changed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password changed successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid OTP.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "invalid"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Invalid OTP."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Password mismatch.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "mismatch"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Passwords did not match!"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "field": {
                                                        "type": "string",
                                                        "example": "phone"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The phone field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "OTP does not match.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "OTP does not match"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/firebase-reset-password": {
            "put": {
                "tags": [
                    "Customer Authentication"
                ],
                "summary": "Firebase Reset Password Verification",
                "description": "Allows customers to verify their phone number using Firebase OTP and reset their password if necessary.",
                "operationId": "8f9bb5fe8bf0c70c1cf1127526ec4370",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "sessionInfo",
                                    "phoneNumber",
                                    "code"
                                ],
                                "properties": {
                                    "sessionInfo": {
                                        "description": "The session information provided by Firebase during OTP generation.",
                                        "type": "string"
                                    },
                                    "phoneNumber": {
                                        "description": "The phone number of the user in E.164 format.",
                                        "type": "string"
                                    },
                                    "code": {
                                        "description": "The OTP code sent to the user's phone.",
                                        "type": "string"
                                    },
                                    "is_reset_token": {
                                        "description": "Optional flag to indicate if the OTP is for resetting the password. Use 1 for true, 0 for false.",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "OTP found, you can proceed"
                                        },
                                        "otp": {
                                            "type": "string",
                                            "example": "inactive"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation or Firebase error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "403"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "INVALID_CODE"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/professional-man/login": {
            "post": {
                "tags": [
                    "Professionalman authentication"
                ],
                "summary": "Professional man login",
                "description": "Authenticate professional man and return a token",
                "operationId": "ae30afbaa69a4bebc3ef1126c75ae386",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "phone",
                                    "password"
                                ],
                                "properties": {
                                    "phone": {
                                        "description": "Phone number of the professional man",
                                        "type": "string",
                                        "example": "1234567890"
                                    },
                                    "password": {
                                        "description": "Password for the professional man",
                                        "type": "string",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "Authentication token",
                                            "type": "string"
                                        },
                                        "topic": {
                                            "description": "Topic associated with the professional man",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Incorrect credentials or account status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code",
                                                        "type": "string",
                                                        "example": "auth-001"
                                                    },
                                                    "message": {
                                                        "description": "Error message",
                                                        "type": "string",
                                                        "example": "Unauthorized."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code",
                                                        "type": "string",
                                                        "example": "validation-error"
                                                    },
                                                    "message": {
                                                        "description": "Error message",
                                                        "type": "string",
                                                        "example": "This number does not exist."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/professional-man/store": {
            "post": {
                "tags": [
                    "Professionalman authentication"
                ],
                "summary": "Store professional man details",
                "description": "Store the details of a professional man and send registration notifications",
                "operationId": "9b73204ec1a7fb549cabc18af6f936b8",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "f_name",
                                    "identity_type",
                                    "identity_number",
                                    "email",
                                    "phone",
                                    "password",
                                    "zone_id",
                                    "vehicle_id",
                                    "earning"
                                ],
                                "properties": {
                                    "f_name": {
                                        "description": "First name of the professional man",
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "l_name": {
                                        "description": "Last name of the professional man",
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "identity_type": {
                                        "description": "Type of identity (passport, driving_license, nid)",
                                        "type": "string",
                                        "example": "passport"
                                    },
                                    "identity_number": {
                                        "description": "Identity number of the professional man",
                                        "type": "string",
                                        "example": "A123456789"
                                    },
                                    "email": {
                                        "description": "Email address of the professional man",
                                        "type": "string",
                                        "example": "john.doe@example.com"
                                    },
                                    "phone": {
                                        "description": "Phone number of the professional man",
                                        "type": "string",
                                        "example": "1234567890"
                                    },
                                    "password": {
                                        "description": "Password for the professional man",
                                        "type": "string",
                                        "example": "Password123!"
                                    },
                                    "zone_id": {
                                        "description": "Zone ID associated with the professional man",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "vehicle_id": {
                                        "description": "Vehicle ID associated with the professional man",
                                        "type": "integer",
                                        "example": 10
                                    },
                                    "earning": {
                                        "description": "Earning type (0 or 1)",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "image": {
                                        "description": "Profile image of the professional man",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "identity_image": {
                                        "description": "Array of identity images",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    },
                                    "additional_documents": {
                                        "description": "Array of additional documents",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Professional man added successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Professional man added successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code",
                                                        "type": "string",
                                                        "example": "validation-error"
                                                    },
                                                    "message": {
                                                        "description": "Error message",
                                                        "type": "string",
                                                        "example": "The password must be at least 8 characters long"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/social-register": {
            "post": {
                "tags": [
                    "Customer social authentication"
                ],
                "summary": "For customer social registration",
                "description": "Customer social registration",
                "operationId": "803e10a0f8ad128fdc059f9c233a0e54",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "The social media token (Google/Facebook/Apple).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "unique_id",
                        "in": "query",
                        "description": "Unique identifier for the user from the social platform.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "User's email address (only required for Google/Facebook).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "phone",
                        "in": "query",
                        "description": "User's phone number.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "medium",
                        "in": "query",
                        "description": "Social media platform (google, facebook, apple).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "google",
                                "facebook",
                                "apple"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "Authentication token",
                                            "type": "string"
                                        },
                                        "is_phone_verified": {
                                            "description": "Phone verification status",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/social-login": {
            "post": {
                "tags": [
                    "Customer social authentication"
                ],
                "summary": "For customer social authentication",
                "description": "Authenticate customers using social login (Google, Facebook, Apple).",
                "operationId": "socialLogin",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "token",
                                    "unique_id",
                                    "medium"
                                ],
                                "properties": {
                                    "token": {
                                        "description": "The social login token.",
                                        "type": "string"
                                    },
                                    "unique_id": {
                                        "description": "The unique ID of the user.",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "The user's email address (required for Google/Facebook).",
                                        "type": "string"
                                    },
                                    "medium": {
                                        "description": "The social platform medium (Google, Facebook, or Apple).",
                                        "type": "string",
                                        "enum": [
                                            "google",
                                            "facebook",
                                            "apple"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "Access token for the authenticated user.",
                                            "type": "string"
                                        },
                                        "is_phone_verified": {
                                            "description": "Indicates if the user's phone is verified.",
                                            "type": "boolean"
                                        },
                                        "phone": {
                                            "description": "User's phone number.",
                                            "type": "string"
                                        },
                                        "res": {
                                            "description": "Response data from the social login provider.",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code.",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code.",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code.",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/banners": {
            "get": {
                "tags": [
                    "Banners"
                ],
                "summary": "Fetch banners based on zone",
                "description": "Fetches a list of banners for a specific zone based on the provided zone ID, latitude, and longitude.",
                "operationId": "9884329edd762bf767fda646325e8444",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "header",
                        "description": "The zone ID to filter banners.",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "example": 1
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of banners for the specified zone.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "banners": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "title": {
                                                        "type": "string",
                                                        "example": "Summer Sale"
                                                    },
                                                    "image_url": {
                                                        "type": "string",
                                                        "example": "https://example.com/banner.jpg"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Zone ID is required or invalid parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "zoneId"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Zone ID is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "An error occurred while fetching banners."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Fetch Categories",
                "description": "Fetches a list of categories based on various filters and sorting options.",
                "operationId": "c0489edff50fd45dc5740d799f895461",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "header",
                        "description": "Zone ID to filter categories by their related services",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "example": 1
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Search categories by name or slug.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "electronics"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched categories.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Electronics"
                                            },
                                            "slug": {
                                                "type": "string",
                                                "example": "electronics"
                                            },
                                            "priority": {
                                                "type": "integer",
                                                "example": 10
                                            },
                                            "products_count": {
                                                "type": "integer",
                                                "example": 15
                                            },
                                            "order_count": {
                                                "type": "integer",
                                                "example": 120
                                            },
                                            "childes": {
                                                "type": "array",
                                                "items": {
                                                    "properties": {
                                                        "id": {
                                                            "type": "integer",
                                                            "example": 2
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Mobile Phones"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "image": {
                                                "type": "string",
                                                "example": "https://example.com/image.jpg"
                                            },
                                            "image_full_url": {
                                                "type": "string",
                                                "example": "https://example.com/image_full.jpg"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "An error occurred while fetching categories."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/categories/childes/{category_id}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get Child Categories",
                "description": "Fetches a list of child categories for a given parent category ID or slug.",
                "operationId": "getChildCategories",
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "path",
                        "description": "The ID or slug of the parent category",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "electronics"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Laptops"
                                            },
                                            "slug": {
                                                "type": "string",
                                                "example": "laptops"
                                            },
                                            "parent_id": {
                                                "type": "integer",
                                                "example": 123
                                            },
                                            "status": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "priority": {
                                                "type": "integer",
                                                "example": 10
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "An error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/categories/products/{category_id}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get Products by Category",
                "description": "Fetches a list of products for a given category ID, with filters and pagination.",
                "operationId": "getProductsByCategory",
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "path",
                        "description": "The ID of the category to fetch products from.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    },
                    {
                        "name": "zoneId",
                        "in": "header",
                        "description": "The ID of the zone (required).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "1"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of products to fetch.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 25
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset for pagination.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 0
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of products to fetch (e.g., 'all', 'new', 'top_rated').",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "all"
                        }
                    },
                    {
                        "name": "price",
                        "in": "query",
                        "description": "Price range as a JSON array [start_price, end_price].",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "[10, 100]"
                        }
                    },
                    {
                        "name": "longitude",
                        "in": "header",
                        "description": "Longitude for location-based filtering.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "85.3240"
                        }
                    },
                    {
                        "name": "latitude",
                        "in": "header",
                        "description": "Latitude for location-based filtering.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "27.7172"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "products": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "total": {
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "example": 25
                                        },
                                        "offset": {
                                            "type": "integer",
                                            "example": 0
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "An error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/categories/products/{category_id}/all": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Retrieve all products by category",
                "description": "Fetches all products associated with the specified category ID.",
                "operationId": "getAllProducts",
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "path",
                        "description": "ID of the category to retrieve products for.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "Accept-Language",
                        "in": "header",
                        "description": "Language preference for the response (e.g., 'en', 'es').",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "en"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of all products in the specified category.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "description": "Product ID.",
                                                "type": "integer",
                                                "example": 101
                                            },
                                            "name": {
                                                "description": "Name of the product.",
                                                "type": "string",
                                                "example": "Product Name"
                                            },
                                            "description": {
                                                "description": "Description of the product.",
                                                "type": "string",
                                                "example": "This is a sample product description."
                                            },
                                            "price": {
                                                "description": "Price of the product.",
                                                "type": "number",
                                                "format": "float",
                                                "example": 19.99
                                            },
                                            "image_url": {
                                                "description": "URL of the product's image.",
                                                "type": "string",
                                                "format": "uri",
                                                "example": "https://example.com/image.jpg"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "description": "Error message.",
                                            "type": "string",
                                            "example": "An unexpected error occurred."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/config": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get business configuration settings",
                "description": "Retrieves the business configuration settings for the authenticated user.",
                "operationId": "ce3da5ef1fbec424b4a662a81744896a",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "business_name": {
                                            "type": "string",
                                            "example": "My Business"
                                        },
                                        "business_email": {
                                            "type": "string",
                                            "example": "info@mybusiness.com"
                                        },
                                        "business_phone": {
                                            "type": "string",
                                            "example": "+1234567890"
                                        },
                                        "business_address": {
                                            "type": "string",
                                            "example": "123 Main St, City, Country"
                                        },
                                        "currency_code": {
                                            "type": "string",
                                            "example": "USD"
                                        },
                                        "timezone": {
                                            "type": "string",
                                            "example": "America/New_York"
                                        },
                                        "logo_url": {
                                            "type": "string",
                                            "example": "https://example.com/logo.png"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Something went wrong."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/config/get-zone-id": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get zone based on latitude and longitude",
                "description": "Returns the zone ID and zone data if the coordinates are within an active zone.",
                "operationId": "58feab9251e59893644a3c914d266b3d",
                "parameters": [
                    {
                        "name": "lat",
                        "in": "query",
                        "description": "Latitude of the location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "lng",
                        "in": "query",
                        "description": "Longitude of the location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "zone_id": {
                                            "type": "string",
                                            "example": "[1,2]"
                                        },
                                        "zone_data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Zone A"
                                                    },
                                                    "status": {
                                                        "type": "integer",
                                                        "example": 1
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or service unavailable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "coordinates"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "We are temporarily unavailable in this area"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not available in this area",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "coordinates"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Service not available in this area"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/config/place-api-autocomplete": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get place autocomplete suggestions",
                "description": "Returns place autocomplete suggestions based on the search text using Google Places API.",
                "operationId": "e0955d0c8b8176ebfef4a7a34e6705ea",
                "parameters": [
                    {
                        "name": "search_text",
                        "in": "query",
                        "description": "Search text for place autocomplete",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "New York"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "predictions": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "description": {
                                                        "type": "string",
                                                        "example": "New York, NY, USA"
                                                    },
                                                    "place_id": {
                                                        "type": "string",
                                                        "example": "ChIJqaUj8fBLzEwRZ5UY3sHGz90"
                                                    },
                                                    "structured_formatting": {
                                                        "properties": {
                                                            "main_text": {
                                                                "type": "string",
                                                                "example": "New York"
                                                            },
                                                            "secondary_text": {
                                                                "type": "string",
                                                                "example": "NY, USA"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "OK"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "validation_error"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The search_text field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Google API error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error_message": {
                                            "type": "string",
                                            "example": "Invalid API key"
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "REQUEST_DENIED"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/config/distance-api": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get distance between two locations",
                "description": "Returns the distance and estimated travel time between the origin and destination using Google Distance Matrix API.",
                "operationId": "distanceApi",
                "parameters": [
                    {
                        "name": "origin_lat",
                        "in": "query",
                        "description": "Latitude of the origin location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": 27.7172
                        }
                    },
                    {
                        "name": "origin_lng",
                        "in": "query",
                        "description": "Longitude of the origin location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": 85.324
                        }
                    },
                    {
                        "name": "destination_lat",
                        "in": "query",
                        "description": "Latitude of the destination location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": 27.673
                        }
                    },
                    {
                        "name": "destination_lng",
                        "in": "query",
                        "description": "Longitude of the destination location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": 85.4278
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with distance data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "example": {
                                    "destination_addresses": [
                                        "Kathmandu, Nepal"
                                    ],
                                    "origin_addresses": [
                                        "Lalitpur, Nepal"
                                    ],
                                    "rows": [
                                        {
                                            "elements": [
                                                {
                                                    "distance": {
                                                        "text": "5.3 km",
                                                        "value": 5300
                                                    },
                                                    "duration": {
                                                        "text": "15 mins",
                                                        "value": 900
                                                    },
                                                    "status": "OK"
                                                }
                                            ]
                                        }
                                    ],
                                    "status": "OK"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "validation",
                                            "message": "origin_lat is required"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/config/place-api-details": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Get place details",
                "description": "Fetches detailed information about a place using the Google Places API.",
                "operationId": "placeApiDetails",
                "parameters": [
                    {
                        "name": "placeid",
                        "in": "query",
                        "description": "Unique Place ID from Google Places API",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "ChIJN1t_tDeuEmsRUsoyG83frY4"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with place details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "example": {
                                    "result": {
                                        "name": "Sydney Opera House",
                                        "formatted_address": "Bennelong Point, Sydney NSW 2000, Australia",
                                        "geometry": {
                                            "location": {
                                                "lat": -33.8567844,
                                                "lng": 151.2152967
                                            }
                                        },
                                        "place_id": "ChIJN1t_tDeuEmsRUsoyG83frY4",
                                        "types": [
                                            "tourist_attraction",
                                            "point_of_interest",
                                            "establishment"
                                        ]
                                    },
                                    "status": "OK"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "validation",
                                            "message": "placeid is required"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/config/geocode-api": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Reverse Geocoding",
                "description": "Converts latitude and longitude into a human-readable address using the Google Geocoding API.",
                "operationId": "geocodeApi",
                "parameters": [
                    {
                        "name": "lat",
                        "in": "query",
                        "description": "Latitude of the location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": -33.8567844
                        }
                    },
                    {
                        "name": "lng",
                        "in": "query",
                        "description": "Longitude of the location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": 151.2152967
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with address details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "example": {
                                    "results": [
                                        {
                                            "formatted_address": "Bennelong Point, Sydney NSW 2000, Australia",
                                            "geometry": {
                                                "location": {
                                                    "lat": -33.8567844,
                                                    "lng": 151.2152967
                                                }
                                            },
                                            "place_id": "ChIJN1t_tDeuEmsRUsoyG83frY4",
                                            "types": [
                                                "street_address"
                                            ]
                                        }
                                    ],
                                    "status": "OK"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "validation",
                                            "message": "lat and lng are required"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/landing-page": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Retrieve landing page settings",
                "description": "Fetches various settings related to the landing page including banners, images, and footer logos.",
                "operationId": "getLandingPageSettings",
                "responses": {
                    "200": {
                        "description": "Landing page settings retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "app_section_image": {
                                            "type": "string",
                                            "example": "image.jpg"
                                        },
                                        "app_section_image_full_url": {
                                            "type": "string",
                                            "example": "https://example.com/image.jpg"
                                        },
                                        "app_section_image_2": {
                                            "type": "string",
                                            "example": "image2.jpg"
                                        },
                                        "app_section_image_2_full_url": {
                                            "type": "string",
                                            "example": "https://example.com/image2.jpg"
                                        },
                                        "footer_logo": {
                                            "type": "string",
                                            "example": "footer_logo.jpg"
                                        },
                                        "footer_logo_full_url": {
                                            "type": "string",
                                            "example": "https://example.com/footer_logo.jpg"
                                        },
                                        "banner_section_full": {
                                            "properties": {
                                                "banner_section_img_full_url": {
                                                    "type": "string",
                                                    "example": "https://example.com/banner_full.jpg"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "banner_section_half": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "img_full_url": {
                                                        "type": "string",
                                                        "example": "https://example.com/banner_half.jpg"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "discount_banner": {
                                            "properties": {
                                                "img_full_url": {
                                                    "type": "string",
                                                    "example": "https://example.com/discount_banner.jpg"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "landing_page_links": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/get-vehicles": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Retrieve list of active vehicles",
                "description": "Fetches a list of active vehicles with their ID and type.",
                "operationId": "getVehicles",
                "responses": {
                    "200": {
                        "description": "List of active vehicles retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "type": {
                                                "type": "string",
                                                "example": "Car"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/get-PaymentMethods": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Retrieve active payment methods",
                "description": "Fetches a list of active payment methods with gateway details such as title, image, and full URL.",
                "operationId": "getPaymentMethods",
                "responses": {
                    "200": {
                        "description": "List of active payment methods retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "gateway": {
                                                "type": "string",
                                                "example": "paypal"
                                            },
                                            "gateway_title": {
                                                "type": "string",
                                                "example": "PayPal"
                                            },
                                            "gateway_image": {
                                                "type": "string",
                                                "example": "paypal_logo.png"
                                            },
                                            "gateway_image_full_url": {
                                                "type": "string",
                                                "example": "https://example.com/payment_modules/gateway_image/paypal_logo.png"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/get-DefaultPaymentMethods": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Retrieve default active payment methods",
                "description": "Fetches a list of default active payment methods (like PayPal, Stripe, etc.) with gateway details such as title, image, and full URL.",
                "operationId": "getDefaultPaymentMethods",
                "responses": {
                    "200": {
                        "description": "List of default active payment methods retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "gateway": {
                                                "type": "string",
                                                "example": "paypal"
                                            },
                                            "gateway_title": {
                                                "type": "string",
                                                "example": "PayPal"
                                            },
                                            "gateway_image": {
                                                "type": "string",
                                                "example": "paypal_logo.png"
                                            },
                                            "gateway_image_full_url": {
                                                "type": "string",
                                                "example": "https://example.com/payment_modules/gateway_image/paypal_logo.png"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/v1/customer/message/send": {
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Send a message",
                "description": "Allows a customer to send a message with optional image attachments.",
                "operationId": "messagesStore",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of messages per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Page offset for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "message",
                                    "receiver_type"
                                ],
                                "properties": {
                                    "message": {
                                        "type": "string",
                                        "example": "Hello! How can I help you?"
                                    },
                                    "receiver_type": {
                                        "type": "string",
                                        "enum": [
                                            "admin",
                                            "professional_man"
                                        ],
                                        "example": "professional_man"
                                    },
                                    "receiver_id": {
                                        "description": "Receiver ID if receiver type is 'professional_man'",
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "conversation_id": {
                                        "description": "Existing conversation ID if available",
                                        "type": "integer",
                                        "example": 10,
                                        "nullable": true
                                    },
                                    "image[]": {
                                        "description": "Multiple images, each with a max size of 5MB",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Message sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "example": 10
                                        },
                                        "offset": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "successfully sent!"
                                        },
                                        "messages": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "conversation_id": {
                                                        "type": "integer",
                                                        "example": 10
                                                    },
                                                    "sender_id": {
                                                        "type": "integer",
                                                        "example": 3
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Hello!"
                                                    },
                                                    "file": {
                                                        "type": "string",
                                                        "example": "[{'img':'image1.jpg','storage':'local'}]",
                                                        "nullable": true
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "conversation": {
                                            "type": "object",
                                            "example": {
                                                "id": 10,
                                                "sender_id": 3,
                                                "receiver_id": 5,
                                                "last_message_time": "2024-01-30T12:34:56Z"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "image.max"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Max File Upload limit is 5MB"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Something went wrong."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/message/chat-image": {
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Upload chat image",
                "description": "Uploads an image for chat messages and returns the image URL.",
                "operationId": "7140556cc9626213641996d6da2c9b99",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "image"
                                ],
                                "properties": {
                                    "image": {
                                        "description": "Image file to be uploaded (Max: 2MB)",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image uploaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "image_url": {
                                            "type": "string",
                                            "example": "https://example.com/storage/app/public/conversation/uploaded_image.jpg"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "image"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The image field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/message/list": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Get user conversations",
                "description": "Fetches the list of conversations for the authenticated user, including sender, receiver, and last message details.",
                "operationId": "e406698f5d19d4bfc6ad69b45152bb53",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of conversations per page (default: 10)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Pagination offset (default: 1)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter conversations by type (e.g., 'admin', 'professional_man')",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "admin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user conversations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "example": "admin"
                                        },
                                        "total_size": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "example": 10
                                        },
                                        "offset": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "conversations": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "sender_id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "receiver_id": {
                                                        "type": "integer",
                                                        "example": 3
                                                    },
                                                    "last_message": {
                                                        "type": "string",
                                                        "example": "Hello! How can I help you?"
                                                    },
                                                    "last_message_time": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2024-01-30T12:45:00Z"
                                                    },
                                                    "sender": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 2
                                                            },
                                                            "f_name": {
                                                                "type": "string",
                                                                "example": "John"
                                                            },
                                                            "l_name": {
                                                                "type": "string",
                                                                "example": "Doe"
                                                            },
                                                            "email": {
                                                                "type": "string",
                                                                "example": "john.doe@example.com"
                                                            },
                                                            "image": {
                                                                "type": "string",
                                                                "example": "https://example.com/profile.jpg"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "receiver": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 3
                                                            },
                                                            "f_name": {
                                                                "type": "string",
                                                                "example": "Jane"
                                                            },
                                                            "l_name": {
                                                                "type": "string",
                                                                "example": "Smith"
                                                            },
                                                            "email": {
                                                                "type": "string",
                                                                "example": "jane.smith@example.com"
                                                            },
                                                            "image": {
                                                                "type": "string",
                                                                "example": "https://example.com/profile2.jpg"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Token required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/message/search-list": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Search user conversations",
                "description": "Fetches the list of conversations where the sender or receiver's name matches the search query.",
                "operationId": "2cafbe9e88b8c4f3b9bb0550394492df",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Search keyword for first or last name (required)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "John"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of conversations per page (default: 10)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Pagination offset (default: 1)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter conversations by type (e.g., 'admin', 'professional_man')",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "admin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of searched conversations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "example": 10
                                        },
                                        "offset": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "conversations": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "sender_id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "receiver_id": {
                                                        "type": "integer",
                                                        "example": 3
                                                    },
                                                    "last_message": {
                                                        "type": "string",
                                                        "example": "Hello! How can I help you?"
                                                    },
                                                    "last_message_time": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2024-01-30T12:45:00Z"
                                                    },
                                                    "sender": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 2
                                                            },
                                                            "f_name": {
                                                                "type": "string",
                                                                "example": "John"
                                                            },
                                                            "l_name": {
                                                                "type": "string",
                                                                "example": "Doe"
                                                            },
                                                            "email": {
                                                                "type": "string",
                                                                "example": "john.doe@example.com"
                                                            },
                                                            "image": {
                                                                "type": "string",
                                                                "example": "https://example.com/profile.jpg"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "receiver": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 3
                                                            },
                                                            "f_name": {
                                                                "type": "string",
                                                                "example": "Jane"
                                                            },
                                                            "l_name": {
                                                                "type": "string",
                                                                "example": "Smith"
                                                            },
                                                            "email": {
                                                                "type": "string",
                                                                "example": "jane.smith@example.com"
                                                            },
                                                            "image": {
                                                                "type": "string",
                                                                "example": "https://example.com/profile2.jpg"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error (name required)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The name field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Token required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/message/details": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Fetch messages of a conversation",
                "description": "Retrieves messages for a given conversation based on conversation ID, admin ID, or professional man ID.",
                "operationId": "8fa386b58f1f2af798f955513502f172",
                "parameters": [
                    {
                        "name": "conversation_id",
                        "in": "query",
                        "description": "ID of the conversation to fetch messages from",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "admin_id",
                        "in": "query",
                        "description": "Admin ID to filter the conversation",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 2
                        }
                    },
                    {
                        "name": "professional_man_id",
                        "in": "query",
                        "description": "Professional man ID to filter the conversation",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 3
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of messages per page (default: 10)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Pagination offset (default: 1)",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of messages with conversation details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "example": 10
                                        },
                                        "offset": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "messages": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "conversation_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "sender_id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "receiver_id": {
                                                        "type": "integer",
                                                        "example": 3
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Hello, how are you?"
                                                    },
                                                    "is_seen": {
                                                        "type": "boolean",
                                                        "example": true
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2024-01-30T12:45:00Z"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "conversation": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "sender_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "receiver_id": {
                                                    "type": "integer",
                                                    "example": 3
                                                },
                                                "last_message": {
                                                    "type": "string",
                                                    "example": "Hello, how are you?"
                                                },
                                                "last_message_time": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "example": "2024-01-30T12:45:00Z"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Token required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/professional-man/message/send": {
            "post": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Store a new message in a conversation",
                "description": "This endpoint allows sending a new message in an existing conversation or creating a new conversation if one does not exist.",
                "operationId": "pmMessagesStore",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "token": {
                                        "description": "The authentication token for the professional user.",
                                        "type": "string"
                                    },
                                    "conversation_id": {
                                        "description": "The ID of the existing conversation (optional).",
                                        "type": "integer"
                                    },
                                    "receiver_type": {
                                        "description": "The type of receiver (e.g., 'customer').",
                                        "type": "string"
                                    },
                                    "receiver_id": {
                                        "description": "The ID of the receiver (required if no conversation exists).",
                                        "type": "integer"
                                    },
                                    "message": {
                                        "description": "The message content.",
                                        "type": "string"
                                    },
                                    "image[]": {
                                        "description": "An array of image files (optional).",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    },
                                    "limit": {
                                        "description": "The number of messages to retrieve per page (optional, default is 10).",
                                        "type": "integer"
                                    },
                                    "offset": {
                                        "description": "The page number for pagination (optional, default is 1).",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully sent the message.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "description": "The total number of messages in the conversation.",
                                            "type": "integer"
                                        },
                                        "limit": {
                                            "description": "The number of messages per page.",
                                            "type": "integer"
                                        },
                                        "offset": {
                                            "description": "The current page number.",
                                            "type": "integer"
                                        },
                                        "status": {
                                            "description": "Whether there is an active order for the conversation.",
                                            "type": "boolean"
                                        },
                                        "message": {
                                            "description": "A success message.",
                                            "type": "string"
                                        },
                                        "messages": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "The message ID.",
                                                        "type": "integer"
                                                    },
                                                    "conversation_id": {
                                                        "description": "The conversation ID.",
                                                        "type": "integer"
                                                    },
                                                    "sender_id": {
                                                        "description": "The sender's ID.",
                                                        "type": "integer"
                                                    },
                                                    "message": {
                                                        "description": "The content of the message.",
                                                        "type": "string"
                                                    },
                                                    "file": {
                                                        "description": "The file associated with the message (if any).",
                                                        "type": "string"
                                                    },
                                                    "created_at": {
                                                        "description": "The timestamp when the message was created.",
                                                        "type": "string",
                                                        "format": "date-time"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "conversation": {
                                            "properties": {
                                                "id": {
                                                    "description": "The conversation ID.",
                                                    "type": "integer"
                                                },
                                                "sender_id": {
                                                    "description": "The sender's ID.",
                                                    "type": "integer"
                                                },
                                                "receiver_id": {
                                                    "description": "The receiver's ID.",
                                                    "type": "integer"
                                                },
                                                "unread_message_count": {
                                                    "description": "The count of unread messages in the conversation.",
                                                    "type": "integer"
                                                },
                                                "last_message_time": {
                                                    "description": "The timestamp of the last message in the conversation.",
                                                    "type": "string",
                                                    "format": "date-time"
                                                },
                                                "sender": {
                                                    "properties": {
                                                        "id": {
                                                            "description": "The sender's ID.",
                                                            "type": "integer"
                                                        },
                                                        "f_name": {
                                                            "description": "The sender's first name.",
                                                            "type": "string"
                                                        },
                                                        "l_name": {
                                                            "description": "The sender's last name.",
                                                            "type": "string"
                                                        },
                                                        "image": {
                                                            "description": "The sender's image URL.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "receiver": {
                                                    "properties": {
                                                        "id": {
                                                            "description": "The receiver's ID.",
                                                            "type": "integer"
                                                        },
                                                        "f_name": {
                                                            "description": "The receiver's first name.",
                                                            "type": "string"
                                                        },
                                                        "l_name": {
                                                            "description": "The receiver's last name.",
                                                            "type": "string"
                                                        },
                                                        "image": {
                                                            "description": "The receiver's image URL.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Validation error or missing required fields.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "description": "Array of validation error messages.",
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/professional-man/message/list": {
            "get": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Get Professional Man Conversations",
                "description": "Fetches the conversations for a professional man based on the provided filters.",
                "operationId": "pmConversations",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Authentication token of the professional man.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "your-auth-token"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of conversations to retrieve per page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "example": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The page number to retrieve.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "example": 1
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter conversations by sender/receiver type (e.g., customer, admin).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "customer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversations fetched successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "example": "customer"
                                        },
                                        "total_size": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "example": 10
                                        },
                                        "offset": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "conversation": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "sender_id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "receiver_id": {
                                                        "type": "integer",
                                                        "example": 3
                                                    },
                                                    "last_message_time": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2025-01-28T12:00:00Z"
                                                    },
                                                    "last_message": {
                                                        "type": "string",
                                                        "example": "Hello, how can I assist you?"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "validation_error"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Invalid token."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Professional Man not found or invalid token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "user_not_found"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Professional Man not found."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/professional-man/message/search-list": {
            "get": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Search Professional Man Conversations",
                "description": "Searches conversations for a professional man based on the provided name filter.",
                "operationId": "pmSearchConversations",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Authentication token of the professional man.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "your-auth-token"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The name to search for in conversations (either sender or receiver's name).",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "John Doe"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of conversations to retrieve per page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "example": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The page number to retrieve.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversations fetched successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "example": 10
                                        },
                                        "offset": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "conversation": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "sender_id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "receiver_id": {
                                                        "type": "integer",
                                                        "example": 3
                                                    },
                                                    "last_message_time": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2025-01-28T12:00:00Z"
                                                    },
                                                    "last_message": {
                                                        "type": "string",
                                                        "example": "Hello, how can I assist you?"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "validation_error"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Name parameter is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Professional Man not found or invalid token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "user_not_found"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Professional Man not found."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/professional-man/message/details": {
            "get": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Get Messages for Professional Man",
                "description": "Fetches messages for a professional man, either by conversation ID or user ID, and marks messages as seen.",
                "operationId": "pmMessages",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Authentication token of the professional man.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "your-auth-token"
                        }
                    },
                    {
                        "name": "conversation_id",
                        "in": "query",
                        "description": "The ID of the conversation to retrieve messages from.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "The user ID to retrieve messages from.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of messages to retrieve per page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "example": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The page number to retrieve.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "example": 10
                                        },
                                        "offset": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "status": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "messages": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "conversation_id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "sender_id": {
                                                        "type": "integer",
                                                        "example": 2
                                                    },
                                                    "receiver_id": {
                                                        "type": "integer",
                                                        "example": 3
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Hello, how can I assist you?"
                                                    },
                                                    "is_seen": {
                                                        "type": "boolean",
                                                        "example": true
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2025-01-28T12:00:00Z"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "conversation": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "sender_id": {
                                                    "type": "integer",
                                                    "example": 2
                                                },
                                                "receiver_id": {
                                                    "type": "integer",
                                                    "example": 3
                                                },
                                                "last_message_time": {
                                                    "type": "string",
                                                    "format": "date-time",
                                                    "example": "2025-01-28T12:00:00Z"
                                                },
                                                "last_message": {
                                                    "type": "string",
                                                    "example": "Hello, how can I assist you?"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "validation_error"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Conversation ID or User ID is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Professional Man not found or invalid token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "user_not_found"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Professional Man not found."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/address/list": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Fetch customer addresses",
                "description": "Fetches a paginated list of customer addresses",
                "operationId": "7bdcc26959ca6e8bed5d5d59a6b45e53",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of addresses per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Page number",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "example": 10
                                        },
                                        "offset": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "addresses": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "address": {
                                                        "type": "string",
                                                        "example": "123 Main Street"
                                                    },
                                                    "city": {
                                                        "type": "string",
                                                        "example": "New York"
                                                    },
                                                    "state": {
                                                        "type": "string",
                                                        "example": "NY"
                                                    },
                                                    "zip": {
                                                        "type": "string",
                                                        "example": "10001"
                                                    },
                                                    "country": {
                                                        "type": "string",
                                                        "example": "USA"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/customer/address/add": {
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Add a new customer address",
                "description": "Allows a customer to add a new address",
                "operationId": "f3af1838082760534ff51b31b947841f",
                "parameters": [
                    {
                        "name": "contact_person_name",
                        "in": "query",
                        "description": "Name of the contact person",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "John Doe"
                        }
                    },
                    {
                        "name": "address_type",
                        "in": "query",
                        "description": "Type of address (e.g., home, office)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "home"
                        }
                    },
                    {
                        "name": "contact_person_number",
                        "in": "query",
                        "description": "Contact number of the person",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "+1234567890"
                        }
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Complete address",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "123 Main Street"
                        }
                    },
                    {
                        "name": "floor",
                        "in": "query",
                        "description": "Floor number (if applicable)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "2nd Floor"
                        }
                    },
                    {
                        "name": "road",
                        "in": "query",
                        "description": "Road name (if applicable)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "5th Avenue"
                        }
                    },
                    {
                        "name": "house",
                        "in": "query",
                        "description": "House number (if applicable)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "B-23"
                        }
                    },
                    {
                        "name": "longitude",
                        "in": "query",
                        "description": "Longitude of the address location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": "-74.0060"
                        }
                    },
                    {
                        "name": "latitude",
                        "in": "query",
                        "description": "Latitude of the address location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": "40.7128"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New address added successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "New address added"
                                        },
                                        "zone_ids": {
                                            "type": "array",
                                            "items": {
                                                "type": "integer",
                                                "example": 1
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or service unavailable in this area",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "coordinates"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Service not available in this area"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/customer/address/update/{id}": {
            "put": {
                "tags": [
                    "Customer"
                ],
                "summary": "Update an existing customer address",
                "description": "Allows a customer to update an existing address by providing the address ID",
                "operationId": "c9026640b80820dfc091b33ee0ff3638",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the address to be updated",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "contact_person_name",
                        "in": "query",
                        "description": "Name of the contact person",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "John Doe"
                        }
                    },
                    {
                        "name": "address_type",
                        "in": "query",
                        "description": "Type of address (e.g., home, office)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "home"
                        }
                    },
                    {
                        "name": "contact_person_number",
                        "in": "query",
                        "description": "Contact number of the person",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "+1234567890"
                        }
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Complete address",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "456 Business Street"
                        }
                    },
                    {
                        "name": "floor",
                        "in": "query",
                        "description": "Floor number (if applicable)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "3rd Floor"
                        }
                    },
                    {
                        "name": "road",
                        "in": "query",
                        "description": "Road name (if applicable)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "Sunset Boulevard"
                        }
                    },
                    {
                        "name": "house",
                        "in": "query",
                        "description": "House number (if applicable)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "A-12"
                        }
                    },
                    {
                        "name": "longitude",
                        "in": "query",
                        "description": "Longitude of the address location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": "-74.0060"
                        }
                    },
                    {
                        "name": "latitude",
                        "in": "query",
                        "description": "Latitude of the address location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": "40.7128"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Address updated"
                                        },
                                        "zone_id": {
                                            "type": "integer",
                                            "example": 2
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or service unavailable in this area",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "coordinates"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Service not available in this area"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Address not found"
                    }
                }
            }
        },
        "/api/v1/customer/address/delete": {
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete a customer address",
                "description": "Allows a customer to delete one of their saved addresses",
                "operationId": "4f86f2964c69a53f4b97cca82113c57f",
                "parameters": [
                    {
                        "name": "address_id",
                        "in": "query",
                        "description": "ID of the address to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Address removed"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "validation"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Address ID is required"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Address not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/customer/info": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Fetch customer info",
                "description": "Retrieves the authenticated customer's information, including order count, membership duration, and discount eligibility.",
                "operationId": "ca52fcb7d8f4fcc6e1b28242e844b04e",
                "parameters": [
                    {
                        "name": "X-localization",
                        "in": "header",
                        "description": "Current language key (required)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "en"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer information retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "email": {
                                            "type": "string",
                                            "example": "johndoe@example.com"
                                        },
                                        "current_language_key": {
                                            "type": "string",
                                            "example": "en"
                                        },
                                        "order_count": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "member_since_days": {
                                            "type": "integer",
                                            "example": 365
                                        },
                                        "is_valid_for_discount": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "discount_amount": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 10
                                        },
                                        "discount_amount_type": {
                                            "type": "string",
                                            "example": "percentage"
                                        },
                                        "validity": {
                                            "type": "string",
                                            "example": "2025-12-31"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing localization header",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "current_language_key"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Current language key is required"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/v1/customer/update-profile": {
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Update user profile or change password",
                "description": "Allows users to update their profile details or change their password. If `button_type` is `change_password`, only password fields should be sent.",
                "operationId": "updateProfile",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email"
                                ],
                                "properties": {
                                    "button_type": {
                                        "description": "Leave empty to update profile. Use 'change_password' to change password.",
                                        "type": "string",
                                        "enum": [
                                            "",
                                            "change_password"
                                        ],
                                        "example": ""
                                    },
                                    "name": {
                                        "description": "User's full name. Required if updating profile.",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "description": "User's email. Required if updating profile.",
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    },
                                    "phone": {
                                        "description": "User's phone number.",
                                        "type": "string",
                                        "example": "+1234567890"
                                    },
                                    "image": {
                                        "description": "Profile image (max 2MB).",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "otp": {
                                        "description": "OTP for verification if applicable.",
                                        "type": "string",
                                        "example": "123456"
                                    },
                                    "verification_on": {
                                        "description": "Verification type (phone/email).",
                                        "type": "string",
                                        "example": "phone"
                                    },
                                    "verification_medium": {
                                        "description": "Verification method (firebase/SMS/email).",
                                        "type": "string",
                                        "example": "firebase"
                                    },
                                    "session_info": {
                                        "description": "Session info for Firebase OTP verification (required if using Firebase).",
                                        "type": "string",
                                        "example": "session_12345"
                                    },
                                    "old_password": {
                                        "description": "Required only if changing password.",
                                        "type": "string",
                                        "format": "password",
                                        "example": "oldpass123"
                                    },
                                    "password": {
                                        "description": "New password (min: 8 characters). Required if changing password.",
                                        "type": "string",
                                        "format": "password",
                                        "example": "newpass123"
                                    },
                                    "confirm_password": {
                                        "description": "Confirm new password. Required if changing password.",
                                        "type": "string",
                                        "format": "password",
                                        "example": "newpass123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Profile updated or password changed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Profile successfully updated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "email"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/update-interest": {
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Update user interests",
                "description": "Allows users to update their interests/preferences.",
                "operationId": "updateInterest",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "interest": {
                                        "description": "An array of user service interests/preferences.",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "example": "services"
                                        },
                                        "example": [
                                            1
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Interests updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Interests updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "interest"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Please select your interested preferences."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/cm-firebase-token": {
            "put": {
                "tags": [
                    "Customer"
                ],
                "summary": "Update Firebase Cloud Messaging (FCM) token",
                "description": "Allows users to update their Firebase Cloud Messaging (FCM) token for push notifications.",
                "operationId": "updateFirebaseToken",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "cm_firebase_token": {
                                        "description": "The new Firebase Cloud Messaging (FCM) token.",
                                        "type": "string",
                                        "example": "abcdef1234567890"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Firebase token updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "cm_firebase_token"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The Firebase token field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/suggested-services": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Get suggested services",
                "description": "Fetches suggested services based on the user's interests and zone. If no interests are set, it returns popular services.",
                "operationId": "getSuggestedServices",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "header",
                        "description": "Zone ID of the customer (can be a single ID or an array of IDs).",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Suggested services retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Home Cleaning"
                                            },
                                            "category_id": {
                                                "type": "integer",
                                                "example": 5
                                            },
                                            "zone_id": {
                                                "type": "integer",
                                                "example": 2
                                            },
                                            "price": {
                                                "type": "number",
                                                "format": "float",
                                                "example": 50
                                            },
                                            "description": {
                                                "type": "string",
                                                "example": "Professional home cleaning service"
                                            },
                                            "image_url": {
                                                "type": "string",
                                                "example": "https://example.com/images/service.jpg"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors (e.g., missing zoneId)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "zoneId"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Zone id is required!"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/update-zone": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Update customer zone",
                "description": "Updates the customer's zone ID based on the provided zoneId in the header.",
                "operationId": "updateZone",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "header",
                        "description": "Zone ID to update for the customer.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Zone updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Zone updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error (missing or invalid zoneId)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "zoneId"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Zone id is required!"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/remove-account": {
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Remove user account",
                "description": "Deletes the authenticated user's account if no ongoing orders exist.",
                "operationId": "removeCustomerAccount",
                "responses": {
                    "200": {
                        "description": "Account deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Account deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User has ongoing orders and cannot delete the account",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "on-going"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "User account delete warning"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/newsletter/subscribe": {
            "post": {
                "tags": [
                    "Newsletter"
                ],
                "summary": "Subscribe to Newsletter",
                "description": "Allows users to subscribe to the newsletter by providing their email address.",
                "operationId": "subscribeNewsletter",
                "requestBody": {
                    "description": "Email address for subscription",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "description": "User's email address for newsletter subscription.",
                                        "type": "string",
                                        "format": "email",
                                        "example": "user@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Subscription successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Subscription successful."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or email already subscribed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "email"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/notifications": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Fetch notifications",
                "description": "Retrieves a list of notifications for the authenticated customer based on the provided zone ID.",
                "operationId": "getCustomerNotifications",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "header",
                        "description": "Zone ID required to fetch notifications.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of notifications retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "title": {
                                                "type": "string",
                                                "example": "New Offer Available!"
                                            },
                                            "description": {
                                                "type": "string",
                                                "example": "Get 20% off on your next order."
                                            },
                                            "target": {
                                                "type": "string",
                                                "example": "customer"
                                            },
                                            "zone_id": {
                                                "type": "integer",
                                                "example": 5,
                                                "nullable": true
                                            },
                                            "created_at": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2024-01-30T12:34:56Z"
                                            },
                                            "updated_at": {
                                                "type": "string",
                                                "format": "date-time",
                                                "example": "2024-01-30T12:34:56Z"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Zone ID is required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "zoneId"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Zone id is required!"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Something went wrong."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/order/track": {
            "get": {
                "tags": [
                    "Order"
                ],
                "summary": "Track an order",
                "description": "Retrieve tracking details for a specific order. If the user is authenticated, only `order_id` is required. Otherwise, `contact_number` is also needed.",
                "operationId": "trackOrder",
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "ID of the order to track",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    },
                    {
                        "name": "contact_number",
                        "in": "query",
                        "description": "Contact number associated with the order",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "9876543210"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order tracking details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": 123
                                        },
                                        "order_status": {
                                            "type": "string",
                                            "example": "pending"
                                        },
                                        "delivery_address": {
                                            "properties": {
                                                "contact_person_number": {
                                                    "type": "string",
                                                    "example": "9876543210"
                                                },
                                                "address": {
                                                    "type": "string",
                                                    "example": "123 Street, City"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "professional_man": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 45
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John Doe"
                                                },
                                                "rating": {
                                                    "properties": {
                                                        "average": {
                                                            "type": "number",
                                                            "format": "float",
                                                            "example": 4.5
                                                        },
                                                        "count": {
                                                            "type": "integer",
                                                            "example": 10
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "is_reviewed": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "is_pm_reviewed": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "validation"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The order_id field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "order_not_found"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Order not found."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/order/place": {
            "post": {
                "tags": [
                    "Order"
                ],
                "summary": "Place a new order",
                "description": "This endpoint allows a user to place a new order with various details and validations.",
                "operationId": "23b96cd56715489b538555e714f63ffc",
                "parameters": [
                    {
                        "name": "service_id",
                        "in": "query",
                        "description": "ID of the service being ordered",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "order_amount",
                        "in": "query",
                        "description": "Total amount of the order",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": 100.5
                        }
                    },
                    {
                        "name": "payment_method",
                        "in": "query",
                        "description": "Payment method chosen for the order",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "cash_on_delivery",
                                "digital_payment"
                            ],
                            "example": "cash_on_delivery"
                        }
                    },
                    {
                        "name": "order_type",
                        "in": "query",
                        "description": "Type of the order",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "delivery"
                            ],
                            "example": "delivery"
                        }
                    },
                    {
                        "name": "distance",
                        "in": "query",
                        "description": "Distance for delivery (if order type is delivery)",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": 5.5
                        }
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "Address for delivery (if order type is delivery)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "1234 Delivery St, Sydney, Australia"
                        }
                    },
                    {
                        "name": "longitude",
                        "in": "query",
                        "description": "Longitude for delivery location (if order type is delivery)",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": 151.2093
                        }
                    },
                    {
                        "name": "latitude",
                        "in": "query",
                        "description": "Latitude for delivery location (if order type is delivery)",
                        "required": false,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": -33.8688
                        }
                    },
                    {
                        "name": "contact_person_name",
                        "in": "query",
                        "description": "Name of the contact person for the order (optional if user is logged in)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "John Doe"
                        }
                    },
                    {
                        "name": "contact_person_number",
                        "in": "query",
                        "description": "Phone number of the contact person (optional if user is logged in)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "1234567890"
                        }
                    },
                    {
                        "name": "coupon_code",
                        "in": "query",
                        "description": "Coupon code to apply for discounts",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "DISCOUNT10"
                        }
                    },
                    {
                        "name": "schedule_at",
                        "in": "query",
                        "description": "Scheduled time for the order (optional)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-02-15T14:30:00Z"
                        }
                    },
                    {
                        "name": "order_note",
                        "in": "query",
                        "description": "Any special notes for the order",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "Please deliver during office hours"
                        }
                    },
                    {
                        "name": "unavailable_item_note",
                        "in": "query",
                        "description": "Note for unavailable items",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "Item out of stock, please substitute with similar"
                        }
                    },
                    {
                        "name": "delivery_instruction",
                        "in": "query",
                        "description": "Delivery instructions for the order",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "Leave at the front door"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order placed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Order placed successfully"
                                        },
                                        "order_id": {
                                            "type": "integer",
                                            "example": 100001
                                        },
                                        "total_amount": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 150.5
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid request or failed validation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Invalid scheduling time",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/order/list": {
            "get": {
                "tags": [
                    "Order"
                ],
                "summary": "Get a paginated list of orders for the authenticated user",
                "operationId": "6e3797a49e2aa59683635535ec898ec5",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of orders per page",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with paginated order list",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "example": 10
                                        },
                                        "offset": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "orders": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "user_id": {
                                                        "type": "integer",
                                                        "example": 5
                                                    },
                                                    "order_status": {
                                                        "type": "string",
                                                        "example": "completed"
                                                    },
                                                    "delivery_address": {
                                                        "properties": {
                                                            "street": {
                                                                "type": "string",
                                                                "example": "123 Main St"
                                                            },
                                                            "city": {
                                                                "type": "string",
                                                                "example": "New York"
                                                            },
                                                            "zip": {
                                                                "type": "string",
                                                                "example": "10001"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "professional_man": {
                                                        "properties": {
                                                            "id": {
                                                                "type": "integer",
                                                                "example": 2
                                                            },
                                                            "name": {
                                                                "type": "string",
                                                                "example": "John Doe"
                                                            },
                                                            "rating": {
                                                                "type": "number",
                                                                "format": "float",
                                                                "example": 4.5
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "details_count": {
                                                        "type": "integer",
                                                        "example": 3
                                                    },
                                                    "is_reviewed": {
                                                        "type": "boolean",
                                                        "example": true
                                                    },
                                                    "is_pm_reviewed": {
                                                        "type": "boolean",
                                                        "example": false
                                                    },
                                                    "created_at": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2024-01-29T10:00:00Z"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/order/running-orders": {
            "get": {
                "tags": [
                    "Order"
                ],
                "summary": "Get running orders",
                "description": "Retrieve a paginated list of running (in-progress) orders for the authenticated user.",
                "operationId": "getRunningOrders",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of orders to retrieve per request",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Pagination offset (page number)",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with running order data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "example": 10
                                        },
                                        "offset": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "orders": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "order_status": {
                                                        "type": "string",
                                                        "example": "processing"
                                                    },
                                                    "delivery_address": {
                                                        "type": "object"
                                                    },
                                                    "professional_man": {
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated - User must be logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated. Please log in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/order/details": {
            "get": {
                "tags": [
                    "Order"
                ],
                "summary": "Get order details",
                "description": "Retrieve details of a specific order for the authenticated user.",
                "operationId": "getCustomerOrderDetails",
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "ID of the order to retrieve details for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with order details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "service_details": {
                                                        "type": "object"
                                                    },
                                                    "zone_id": {
                                                        "type": "integer",
                                                        "example": 5
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated - User must be logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated. Please log in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error - order_id is required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "order"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Order not found."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/order/cancel": {
            "put": {
                "tags": [
                    "Order"
                ],
                "summary": "Cancel an order",
                "description": "Allows the authenticated user to cancel an order if it is still pending, failed, or already canceled.",
                "operationId": "cancelOrder",
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "ID of the order to be canceled",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    },
                    {
                        "name": "reason",
                        "in": "query",
                        "description": "Reason for canceling the order (max 255 characters)",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "maxLength": 255,
                            "example": "Customer changed their mind"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order canceled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Order canceled successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated - User must be logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated. Please log in."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or cancellation not allowed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "order"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "You cannot cancel after confirmation."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "order"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Order not found."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/order/payment-method": {
            "put": {
                "tags": [
                    "Order"
                ],
                "summary": "Update order payment method to cash on delivery",
                "description": "Allows the authenticated user to change the payment method to cash on delivery if the service is available.",
                "operationId": "updatePaymentMethod",
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "ID of the order to update the payment method",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment method updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Payment method updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Cash on delivery is not available",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "cod"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Cash on delivery order not available at this time."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "order"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Order not found."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/order/cancellation-reasons": {
            "get": {
                "tags": [
                    "Order"
                ],
                "summary": "Retrieve cancellation reasons",
                "description": "Fetches a list of cancellation reasons based on the user type (if provided) with pagination support.",
                "operationId": "cancellationReason",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of items per page",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The page number to fetch",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The user type for filtering the cancellation reasons (optional)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "admin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cancellation reasons with pagination data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "example": 10
                                        },
                                        "offset": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "reasons": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "reason": {
                                                        "type": "string",
                                                        "example": "Customer changed their mind"
                                                    },
                                                    "user_type": {
                                                        "type": "string",
                                                        "example": "admin"
                                                    },
                                                    "status": {
                                                        "type": "integer",
                                                        "example": 1
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/service-list": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Get list of active services by service IDs",
                "description": "Fetches a list of active services based on the provided service IDs.",
                "operationId": "getServiceList",
                "parameters": [
                    {
                        "name": "service_id[]",
                        "in": "query",
                        "description": "A JSON-encoded array of service IDs",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched the list of services",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "description": {
                                                        "type": "string"
                                                    },
                                                    "price": {
                                                        "type": "number",
                                                        "format": "float"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation failed for the service_id parameter",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "field": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/order/send-notification/{order_id}": {
            "get": {
                "tags": [
                    "Order"
                ],
                "summary": "Send order notification",
                "description": "Sends a notification for an order if the payment method is 'cash_on_delivery' or not 'digital_payment' or 'partial_payment'.",
                "operationId": "orderNotification",
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "path",
                        "description": "The ID of the order for which the notification will be sent",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    },
                    {
                        "name": "guest_id",
                        "in": "query",
                        "description": "The guest user ID if the user is not logged in",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Notification sent successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Invalid order or payment method."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/getPendingReviews": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Get Pending Reviews for an Order",
                "description": "Fetch the list of pending reviews for the services in a specific order.",
                "operationId": "getPendingReviews",
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "The ID of the order",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "details": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "service_id": {
                                                        "type": "integer"
                                                    },
                                                    "service_details": {
                                                        "type": "object",
                                                        "additionalProperties": true
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error, invalid input",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unexpected error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/latest": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Fetch latest products",
                "description": "Fetches a list of the latest products based on category and other filters.",
                "operationId": "getLatestProducts",
                "parameters": [
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "The category ID to filter products by",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of products to fetch",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The starting point for fetching products (pagination)",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of products to fetch (default is 'all')",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "all"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched the latest products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "products": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "price": {
                                                        "type": "number",
                                                        "format": "float"
                                                    },
                                                    "category": {
                                                        "type": "string"
                                                    },
                                                    "image_url": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "total_count": {
                                            "type": "integer"
                                        },
                                        "limit": {
                                            "type": "integer"
                                        },
                                        "offset": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or invalid parameters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/search": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Search for products based on various filters",
                "description": "This endpoint allows users to search for products by different parameters like name, category, rating, etc.",
                "operationId": "4fb10996c3622d784e95d7364fb9eef4",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "header",
                        "description": "The list of zone IDs to filter products by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The search term for product names, can be multiple words",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "category_id",
                        "in": "query",
                        "description": "The category ID to filter products",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of products to return per page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter products by type (e.g., all, popular, new)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "all"
                        }
                    },
                    {
                        "name": "rating",
                        "in": "query",
                        "description": "Filter products by rating",
                        "required": false,
                        "schema": {
                            "description": "Filter by rating presence",
                            "type": "integer",
                            "enum": [
                                1
                            ]
                        }
                    },
                    {
                        "name": "rating_3_plus",
                        "in": "query",
                        "description": "Filter products with rating greater than 3",
                        "required": false,
                        "schema": {
                            "description": "Filter by rating greater than 3",
                            "type": "integer",
                            "enum": [
                                1
                            ]
                        }
                    },
                    {
                        "name": "rating_4_plus",
                        "in": "query",
                        "description": "Filter products with rating greater than 4",
                        "required": false,
                        "schema": {
                            "description": "Filter by rating greater than 4",
                            "type": "integer",
                            "enum": [
                                1
                            ]
                        }
                    },
                    {
                        "name": "rating_5",
                        "in": "query",
                        "description": "Filter products with a rating of 5",
                        "required": false,
                        "schema": {
                            "description": "Filter by rating 5",
                            "type": "integer",
                            "enum": [
                                1
                            ]
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "description": "Sort the results by name, price (low/high), or custom sort order",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc",
                                "low",
                                "high"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of products matching the search criteria",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "description": "Total number of products matching the search",
                                            "type": "integer"
                                        },
                                        "limit": {
                                            "description": "The limit of products per page",
                                            "type": "integer"
                                        },
                                        "offset": {
                                            "description": "The current page number",
                                            "type": "integer"
                                        },
                                        "products": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "name": {
                                                        "description": "The product name",
                                                        "type": "string"
                                                    },
                                                    "category_ids": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object"
                                                        }
                                                    },
                                                    "rating_count": {
                                                        "description": "The number of reviews for the product",
                                                        "type": "integer"
                                                    },
                                                    "avg_rating": {
                                                        "description": "The average rating of the product",
                                                        "type": "number",
                                                        "format": "float"
                                                    },
                                                    "recommended": {
                                                        "description": "Whether the product is recommended",
                                                        "type": "integer"
                                                    },
                                                    "available_time_starts": {
                                                        "description": "The available start time for the product",
                                                        "type": "string"
                                                    },
                                                    "available_time_ends": {
                                                        "description": "The available end time for the product",
                                                        "type": "string"
                                                    },
                                                    "available_date_starts": {
                                                        "description": "The available start date for the product",
                                                        "type": "string"
                                                    },
                                                    "available_date_ends": {
                                                        "description": "The available end date for the product",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Zone ID is required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/popular": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get popular products",
                "description": "Retrieve popular products based on the provided filters such as zoneId, type, and location.",
                "operationId": "getPopularProducts",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "header",
                        "description": "The list of zone IDs to filter products by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of product filter ('all', 'general', 'unavailable', 'temp_closed').",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "example": "all"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of products to retrieve per page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The page number for pagination.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved popular products.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "limit": {
                                            "type": "integer",
                                            "example": 10
                                        },
                                        "offset": {
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "products": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Product Name"
                                                    },
                                                    "price": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 99.99
                                                    },
                                                    "rating": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 4.5
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Zone ID header is required.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "zoneId"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Zone ID is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/most-reviewed": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get most reviewed products",
                "description": "Retrieves a list of the most reviewed products based on zone ID, limit, offset, and type.",
                "operationId": "getMostReviewedProducts",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "header",
                        "description": "The zone ID for filtering products.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of product filter ('all', 'general', 'rating', 'unavailable', 'temp_closed').",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "all"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of products to return.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The page offset for pagination.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of most reviewed products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "description": "Total number of products",
                                            "type": "integer"
                                        },
                                        "limit": {
                                            "description": "Limit of products returned",
                                            "type": "integer"
                                        },
                                        "offset": {
                                            "description": "Offset used for pagination",
                                            "type": "integer"
                                        },
                                        "products": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "avg_rating": {
                                                        "type": "number",
                                                        "format": "float"
                                                    },
                                                    "reviews_count": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden. zoneId header is missing.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/details/{id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get product details",
                "description": "Retrieves the details of a specific product based on the product ID.",
                "operationId": "getProduct",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the product to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product details successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "description": "Product ID",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "Product name",
                                            "type": "string"
                                        },
                                        "description": {
                                            "description": "Product description",
                                            "type": "string"
                                        },
                                        "price": {
                                            "description": "Product price",
                                            "type": "number",
                                            "format": "float"
                                        },
                                        "image_url": {
                                            "description": "Product image URL",
                                            "type": "string"
                                        },
                                        "created_at": {
                                            "description": "Product creation date",
                                            "type": "string",
                                            "format": "date-time"
                                        },
                                        "updated_at": {
                                            "description": "Product update date",
                                            "type": "string",
                                            "format": "date-time"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": [
                                                {
                                                    "properties": {
                                                        "code": {
                                                            "type": "string",
                                                            "example": "product-001"
                                                        },
                                                        "message": {
                                                            "type": "string",
                                                            "example": "Product not found"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Internal server error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/related-products/{service_id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get related products",
                "description": "Retrieves a list of related products based on the given product ID.",
                "operationId": "getRelatedProducts",
                "parameters": [
                    {
                        "name": "service_id",
                        "in": "path",
                        "description": "The ID of the product for which related products are being retrieved.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Related products successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "description": "Total number of related products",
                                            "type": "integer"
                                        },
                                        "limit": {
                                            "description": "Limit for pagination",
                                            "type": "integer"
                                        },
                                        "offset": {
                                            "description": "Offset for pagination",
                                            "type": "integer"
                                        },
                                        "products": {
                                            "type": "array",
                                            "items": [
                                                {
                                                    "properties": {
                                                        "id": {
                                                            "description": "Product ID",
                                                            "type": "integer"
                                                        },
                                                        "name": {
                                                            "description": "Product name",
                                                            "type": "string"
                                                        },
                                                        "description": {
                                                            "description": "Product description",
                                                            "type": "string"
                                                        },
                                                        "price": {
                                                            "description": "Product price",
                                                            "type": "number",
                                                            "format": "float"
                                                        },
                                                        "image_url": {
                                                            "description": "Product image URL",
                                                            "type": "string"
                                                        },
                                                        "created_at": {
                                                            "description": "Product creation date",
                                                            "type": "string",
                                                            "format": "date-time"
                                                        },
                                                        "updated_at": {
                                                            "description": "Product update date",
                                                            "type": "string",
                                                            "format": "date-time"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": [
                                                {
                                                    "properties": {
                                                        "code": {
                                                            "type": "string",
                                                            "example": "product-001"
                                                        },
                                                        "message": {
                                                            "type": "string",
                                                            "example": "Product not found"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Internal server error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/reviews/{service_id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get product reviews",
                "description": "Retrieves a list of reviews for a specific service, including customer details and service name.",
                "operationId": "getProductReviews",
                "parameters": [
                    {
                        "name": "service_id",
                        "in": "path",
                        "description": "The ID of the service for which reviews are being retrieved.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reviews successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "description": "Review ID",
                                                "type": "integer"
                                            },
                                            "customer": {
                                                "description": "Customer details",
                                                "properties": {
                                                    "id": {
                                                        "description": "Customer ID",
                                                        "type": "integer"
                                                    },
                                                    "name": {
                                                        "description": "Customer name",
                                                        "type": "string"
                                                    },
                                                    "email": {
                                                        "description": "Customer email",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "service_name": {
                                                "description": "Service name",
                                                "type": "string"
                                            },
                                            "rating": {
                                                "description": "Review rating",
                                                "type": "integer"
                                            },
                                            "comment": {
                                                "description": "Review comment",
                                                "type": "string"
                                            },
                                            "attachment": {
                                                "description": "Review attachments",
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "created_at": {
                                                "description": "Review creation date",
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "updated_at": {
                                                "description": "Review update date",
                                                "type": "string",
                                                "format": "date-time"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found or no reviews available",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": [
                                                {
                                                    "properties": {
                                                        "code": {
                                                            "type": "string",
                                                            "example": "review-001"
                                                        },
                                                        "message": {
                                                            "type": "string",
                                                            "example": "No reviews found for this service"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Internal server error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/rating/{service_id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get product rating",
                "description": "Retrieves the overall rating for a specific product.",
                "operationId": "getProductRating",
                "parameters": [
                    {
                        "name": "service_id",
                        "in": "path",
                        "description": "The ID of the product for which the rating is being retrieved.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Overall product rating retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "number",
                                    "format": "float"
                                },
                                "example": 4.5
                            }
                        }
                    },
                    "403": {
                        "description": "Error retrieving product rating",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "string",
                                            "example": "Error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "string",
                                            "example": "Product not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/reviews/submit": {
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Submit a product review",
                "description": "Allows a user to submit a review for a specific product.",
                "operationId": "submitProductReview",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "service_id",
                                    "order_id",
                                    "rating"
                                ],
                                "properties": {
                                    "service_id": {
                                        "description": "The ID of the service being reviewed.",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "order_id": {
                                        "description": "The ID of the order associated with the review.",
                                        "type": "integer",
                                        "example": 1001
                                    },
                                    "comment": {
                                        "description": "Optional comment for the review.",
                                        "type": "string",
                                        "example": "Great service!",
                                        "nullable": true
                                    },
                                    "rating": {
                                        "description": "Rating given to the service (max: 5).",
                                        "type": "number",
                                        "format": "float",
                                        "example": 4.5
                                    },
                                    "attachment[]": {
                                        "description": "Optional image attachments for the review (max size: 2MB each).",
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Review submitted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Review submitted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors or duplicate review submission",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "review"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Review already submitted"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "string",
                                            "example": "Service not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/recommended": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get recommended products",
                "description": "Fetches recommended products based on the provided zone ID and optional filters.",
                "operationId": "getRecommended",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "header",
                        "description": "The ID of the zone for which recommendations are requested.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter for the type of products to recommend (default: all).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "all",
                            "enum": [
                                "all"
                            ]
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Search keyword for filtering recommended products.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of products to return (default: 10).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The number of products to skip before starting to return results (default: 0).",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of recommended products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "products": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Sample Product"
                                                    },
                                                    "price": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 19.99
                                                    },
                                                    "rating": {
                                                        "type": "number",
                                                        "format": "float",
                                                        "example": 4.5
                                                    },
                                                    "image": {
                                                        "type": "string",
                                                        "example": "https://example.com/image.jpg"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Zone ID is required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "zoneId"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Zone ID is required"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/service-search": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Search services",
                "description": "Search for active services based on a given name and zone ID.",
                "operationId": "serviceSearch",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "header",
                        "description": "The ID of the zone for which services are being searched.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The search keyword for filtering services.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matching services",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "services": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "type": "integer",
                                                        "example": 1
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Cleaning Service"
                                                    },
                                                    "image": {
                                                        "type": "string",
                                                        "example": "https://example.com/image.jpg"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or missing zone ID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "zoneId"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Zone ID is required"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products/recommended/most-reviewed": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get most reviewed recommended products",
                "description": "Retrieve a list of the most reviewed recommended products based on zone ID and optional search filters.",
                "operationId": "recommendedMostReviewed",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "header",
                        "description": "The ID of the zone for filtering products.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of products to filter (default: all).",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "all"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "A keyword to filter products by name.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of most reviewed recommended products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "Premium Laptop"
                                            },
                                            "image": {
                                                "type": "string",
                                                "example": "https://example.com/product.jpg"
                                            },
                                            "rating": {
                                                "type": "number",
                                                "format": "float",
                                                "example": 4.5
                                            },
                                            "review_count": {
                                                "type": "integer",
                                                "example": 120
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or missing zone ID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "zoneId"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Zone ID is required"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/professional-man/reviews/{professional_man_id}": {
            "get": {
                "tags": [
                    "Customer Review for Professionalman"
                ],
                "summary": "Fetch reviews for a professional man",
                "description": "Fetches a list of reviews for a specific professional man identified by their ID.",
                "operationId": "getReviewsForProfessionalMan",
                "parameters": [
                    {
                        "name": "professional_man_id",
                        "in": "path",
                        "description": "ID of the professional man to fetch reviews for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched reviews.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "customer": {
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "example": "John Doe"
                                                    },
                                                    "email": {
                                                        "type": "string",
                                                        "example": "john.doe@example.com"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "professional_man": {
                                                "properties": {
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Jane Smith"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "attachment": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string",
                                                    "example": "attachment_url_1.jpg"
                                                }
                                            },
                                            "review": {
                                                "type": "string",
                                                "example": "Great service, highly recommend!"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No reviews found for the specified professional man.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No reviews found for the specified professional man."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/v1/professional-man/reviews/rating/{professional_man_id}": {
            "get": {
                "tags": [
                    "Customer Review for Professionalman"
                ],
                "summary": "Get the average rating of a professional man",
                "description": "Retrieve the overall average rating for a specific professional man based on their reviews.",
                "operationId": "c134713634ea99ff6986a37d88a9db2a",
                "parameters": [
                    {
                        "name": "professional_man_id",
                        "in": "path",
                        "description": "ID of the professional man",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "number"
                                },
                                "example": 4.75
                            }
                        }
                    },
                    "403": {
                        "description": "Error occurred",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "string",
                                            "example": "Error message"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Professional man not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "string",
                                            "example": "Professional man not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearer": []
                    }
                ]
            }
        },
        "/api/v1/professional-man/reviews/submit": {
            "post": {
                "tags": [
                    "Customer Review for Professionalman"
                ],
                "summary": "Submit a review for a Professional Man",
                "operationId": "528d56d062b3a2cf50723cf8dc8d04b3",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "professional_man_id",
                                    "order_id",
                                    "comment",
                                    "rating"
                                ],
                                "properties": {
                                    "professional_man_id": {
                                        "description": "ID of the Professional Man",
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "order_id": {
                                        "description": "ID of the order associated with the review",
                                        "type": "integer",
                                        "example": 101
                                    },
                                    "comment": {
                                        "description": "Comment for the review",
                                        "type": "string",
                                        "example": "Great service!"
                                    },
                                    "rating": {
                                        "description": "Rating for the service (1-5)",
                                        "type": "number",
                                        "format": "float",
                                        "example": 4.5
                                    },
                                    "attachment[]": {
                                        "type": "array",
                                        "items": {
                                            "description": "Attachment or image for the review",
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Review submitted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Review submitted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors or unauthorized access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "review"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "You have already submitted a review."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/professional-man/profile": {
            "get": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Get Professional Man Profile",
                "description": "Fetches the profile details of a professional man based on the provided token.",
                "operationId": "getProfessionalManProfile",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Authentication token for the professional man",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with the professional man's profile",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "avg_rating": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 4.5
                                        },
                                        "rating_count": {
                                            "type": "integer",
                                            "example": 20
                                        },
                                        "order_count": {
                                            "type": "integer",
                                            "example": 100
                                        },
                                        "todays_order_count": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "this_week_order_count": {
                                            "type": "integer",
                                            "example": 20
                                        },
                                        "member_since_days": {
                                            "type": "integer",
                                            "example": 365
                                        },
                                        "cash_in_hands": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 1500.5
                                        },
                                        "balance": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 2000
                                        },
                                        "total_withdrawn": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 500
                                        },
                                        "total_earning": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 2500
                                        },
                                        "withdraw_able_balance": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 1000
                                        },
                                        "Payable_Balance": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 1500
                                        },
                                        "pending_withdraw": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 200
                                        },
                                        "adjust_able": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "show_pay_now_button": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "over_flow_warning": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "over_flow_block_warning": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "todays_earning": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 500
                                        },
                                        "this_week_earning": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 1500
                                        },
                                        "this_month_earning": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 6000
                                        },
                                        "total_incentive_earning": {
                                            "type": "number",
                                            "format": "float",
                                            "example": 300
                                        },
                                        "incentive_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "shift_name": {
                                            "type": "string",
                                            "example": "Morning Shift"
                                        },
                                        "shift_start_time": {
                                            "type": "string",
                                            "format": "time",
                                            "example": "08:00:00"
                                        },
                                        "shift_end_time": {
                                            "type": "string",
                                            "format": "time",
                                            "example": "16:00:00"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Professional man not found"
                    }
                }
            }
        },
        "/api/v1/professional-man/update-profile": {
            "post": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Update Professional Man Profile",
                "description": "Updates the profile of a professional man, including uploading an image.",
                "operationId": "5353148beb6e16e1e4c1f9616f877e5c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "token",
                                    "f_name",
                                    "l_name",
                                    "email"
                                ],
                                "properties": {
                                    "token": {
                                        "description": "Authentication token",
                                        "type": "string",
                                        "example": "abc123xyz"
                                    },
                                    "f_name": {
                                        "description": "First name of the professional man",
                                        "type": "string",
                                        "example": "John"
                                    },
                                    "l_name": {
                                        "description": "Last name of the professional man",
                                        "type": "string",
                                        "example": "Doe"
                                    },
                                    "email": {
                                        "description": "Email address",
                                        "type": "string",
                                        "example": "john.doe@example.com"
                                    },
                                    "password": {
                                        "description": "Password (optional, minimum 8 characters with mixed case, numbers, and symbols)",
                                        "type": "string",
                                        "example": "Password@123",
                                        "nullable": true
                                    },
                                    "image": {
                                        "description": "Profile image (optional, max size: 2MB)",
                                        "type": "string",
                                        "format": "binary",
                                        "nullable": true
                                    },
                                    "vehicle_id": {
                                        "description": "Vehicle ID (optional)",
                                        "type": "integer",
                                        "example": 5,
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Profile successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "successfully updated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/professional-man/update-active-status": {
            "post": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Update Active Status of Professional Man",
                "description": "Toggles the active status of the professional man and updates the shift ID.",
                "operationId": "647f09d6818c1aa1e3b02533f9f527d3",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Auth token of the professional man",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "shift_id",
                        "in": "query",
                        "description": "Shift ID to update (optional)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the active status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Active status updated successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request, missing or invalid parameters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid request"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/professional-man/current-orders": {
            "get": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Get Current Orders of Professional Man",
                "description": "Fetches a list of current orders for a professional man based on their active status and order status.",
                "operationId": "8900b99efb3589b9bd29269887c62695",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Auth token of the professional man",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved current orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "order_id": {
                                                "type": "integer"
                                            },
                                            "customer_name": {
                                                "type": "string"
                                            },
                                            "restaurant_name": {
                                                "type": "string"
                                            },
                                            "order_status": {
                                                "type": "string"
                                            },
                                            "schedule_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "accepted_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request, missing or invalid parameters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid request"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/professional-man/latest-orders": {
            "get": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Get Latest Orders for Professional Man",
                "description": "Fetches a list of the latest orders based on the professional man's type, vehicle ID, and order status.",
                "operationId": "61d42d37b9cedea9dc78a67782a17eb2",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Auth token of the professional man",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the latest orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "order_id": {
                                                "type": "integer"
                                            },
                                            "customer_name": {
                                                "type": "string"
                                            },
                                            "order_status": {
                                                "type": "string"
                                            },
                                            "schedule_at": {
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "subscription_id": {
                                                "type": "integer",
                                                "nullable": true
                                            },
                                            "vehicle_id": {
                                                "type": "integer",
                                                "nullable": true
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request, missing or invalid parameters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid request"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/professional-man/accept-order": {
            "put": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Accept an Order",
                "description": "Allows a professional man to accept an order based on the order ID.",
                "operationId": "1a5ff19684e295ea701bd70bf9e76e65",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Auth token of the professional man",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "The ID of the order to be accepted",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order accepted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Order accepted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error: Missing or invalid parameters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found or cannot be accepted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Professional man has exceeded maximum orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "203": {
                        "description": "Professional man exceeds max cash in hand",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/professional-man/record-location-data": {
            "post": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Record Location Data",
                "description": "Records the location data (longitude, latitude, location) of the professional man.",
                "operationId": "320ff89d0df13f2002d8bc84b235fa19",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Auth token of the professional man",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "longitude",
                        "in": "query",
                        "description": "Longitude of the professional man's location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "latitude",
                        "in": "query",
                        "description": "Latitude of the professional man's location",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Address or name of the location",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Location data recorded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Location recorded"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error: Missing or invalid parameters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Professional man not found or invalid token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/professional-man/order-delivery-history": {
            "get": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Get Order History",
                "description": "Fetches the delivery history of a specific order for the professional man.",
                "operationId": "881c148f3b50c79beb7e4c50fc912424",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Auth token of the professional man",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "ID of the order to fetch the history for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order history retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "order_id": {
                                                "type": "integer"
                                            },
                                            "professional_man_id": {
                                                "type": "integer"
                                            },
                                            "longitude": {
                                                "type": "number",
                                                "format": "float"
                                            },
                                            "latitude": {
                                                "type": "number",
                                                "format": "float"
                                            },
                                            "location": {
                                                "type": "string"
                                            },
                                            "time": {
                                                "type": "string",
                                                "format": "date-time"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error: Missing or invalid parameters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Professional man not found or invalid token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/professional-man/update-order-status": {
            "post": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Update order status and upload proof images",
                "description": "Updates the order status to either 'completed' or 'canceled' and allows uploading proof images if the order is completed.",
                "operationId": "updateOrderStatus",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "token",
                                    "order_id",
                                    "status"
                                ],
                                "properties": {
                                    "token": {
                                        "description": "The authentication token of the professional man.",
                                        "type": "string"
                                    },
                                    "order_id": {
                                        "description": "The ID of the order.",
                                        "type": "integer"
                                    },
                                    "status": {
                                        "description": "The status of the order. Can be 'completed' or 'canceled'.",
                                        "type": "string",
                                        "enum": [
                                            "confirmed",
                                            "completed",
                                            "canceled"
                                        ]
                                    },
                                    "reason": {
                                        "description": "The reason for cancellation. Required if the status is 'canceled'.",
                                        "type": "string"
                                    },
                                    "otp": {
                                        "description": "The OTP for verification when the status is 'completed'.",
                                        "type": "string"
                                    },
                                    "order_proof[]": {
                                        "description": "An array of image files for order proof.",
                                        "type": "array",
                                        "items": {
                                            "description": "Attachment or image for the order proof",
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Status updated successfully."
                    },
                    "403": {
                        "description": "Validation errors or failed to update order."
                    },
                    "406": {
                        "description": "OTP mismatch or other errors."
                    }
                }
            }
        },
        "/api/v1/professional-man/order-details": {
            "get": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Get Order Details",
                "description": "Retrieve the details of a specific order by its ID. Only accessible by the authenticated ProfessionalMan.",
                "operationId": "getOrderDetails",
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "The unique identifier of the order.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Authentication token of the ProfessionalMan.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order details retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "order_details": {
                                            "description": "An array of order details.",
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "Detail ID",
                                                        "type": "integer"
                                                    },
                                                    "product_name": {
                                                        "description": "Name of the product",
                                                        "type": "string"
                                                    },
                                                    "quantity": {
                                                        "description": "Quantity of the product",
                                                        "type": "integer"
                                                    },
                                                    "price": {
                                                        "description": "Price of the product",
                                                        "type": "number",
                                                        "format": "float"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or authentication failure.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/api/v1/professional-man/order": {
            "get": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Get Order",
                "description": "Retrieve details of a specific order by its ID. Only accessible by the authenticated ProfessionalMan for completed, canceled, or failed orders.",
                "operationId": "getOrder",
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "The unique identifier of the order.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Authentication token of the ProfessionalMan.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order details retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "description": "Order ID",
                                            "type": "integer"
                                        },
                                        "customer": {
                                            "description": "Customer details",
                                            "properties": {
                                                "name": {
                                                    "description": "Customer name",
                                                    "type": "string"
                                                },
                                                "email": {
                                                    "description": "Customer email",
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "details": {
                                            "description": "Order details",
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "product_name": {
                                                        "description": "Product name",
                                                        "type": "string"
                                                    },
                                                    "quantity": {
                                                        "description": "Quantity",
                                                        "type": "integer"
                                                    },
                                                    "price": {
                                                        "description": "Price",
                                                        "type": "number",
                                                        "format": "float"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "payments": {
                                            "description": "Payment details",
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "payment_method": {
                                                        "description": "Payment method",
                                                        "type": "string"
                                                    },
                                                    "amount": {
                                                        "description": "Payment amount",
                                                        "type": "number",
                                                        "format": "float"
                                                    },
                                                    "status": {
                                                        "description": "Payment status",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "order_status": {
                                            "description": "Order status",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or authentication failure.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/api/v1/professional-man/all-orders": {
            "get": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Get All Orders",
                "description": "Retrieve a paginated list of all orders for the authenticated ProfessionalMan. Only completed, canceled, or failed orders are returned.",
                "operationId": "getAllOrders",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of orders to retrieve per page.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 10
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Page number for pagination.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Authentication token of the ProfessionalMan.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated list of orders retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "total_size": {
                                            "description": "Total number of orders.",
                                            "type": "integer"
                                        },
                                        "limit": {
                                            "description": "Number of orders per page.",
                                            "type": "integer"
                                        },
                                        "offset": {
                                            "description": "Current page number.",
                                            "type": "integer"
                                        },
                                        "orders": {
                                            "description": "List of orders.",
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "id": {
                                                        "description": "Order ID",
                                                        "type": "integer"
                                                    },
                                                    "customer": {
                                                        "description": "Customer details",
                                                        "properties": {
                                                            "name": {
                                                                "description": "Customer name",
                                                                "type": "string"
                                                            },
                                                            "email": {
                                                                "description": "Customer email",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "order_status": {
                                                        "description": "Order status",
                                                        "type": "string"
                                                    },
                                                    "schedule_at": {
                                                        "description": "Scheduled date and time for the order",
                                                        "type": "string",
                                                        "format": "date-time"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or authentication failure.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/api/v1/professional-man/last-location": {
            "get": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Get Last Location of Delivery",
                "description": "Retrieve the last recorded location for a specific order based on its delivery history.",
                "operationId": "getLastLocation",
                "parameters": [
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "The ID of the order to retrieve the last location for.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Last recorded location retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "description": "ID of the delivery history record.",
                                            "type": "integer"
                                        },
                                        "latitude": {
                                            "description": "Latitude of the last location.",
                                            "type": "number",
                                            "format": "float"
                                        },
                                        "longitude": {
                                            "description": "Longitude of the last location.",
                                            "type": "number",
                                            "format": "float"
                                        },
                                        "created_at": {
                                            "description": "Timestamp of the last location record.",
                                            "type": "string",
                                            "format": "date-time"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code.",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found or no delivery history available.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "description": "Error message.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/api/v1/professional-man/update-payment-status": {
            "put": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Update Order Payment Status",
                "description": "Update the payment status of an order to 'paid'.",
                "operationId": "orderPaymentStatusUpdate",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "order_id": {
                                        "description": "The ID of the order.",
                                        "type": "integer",
                                        "example": 123
                                    },
                                    "status": {
                                        "description": "The payment status to update (must be 'paid').",
                                        "type": "string",
                                        "example": "paid"
                                    },
                                    "token": {
                                        "description": "Authentication token of the professional man.",
                                        "type": "string",
                                        "example": "your-auth-token"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment status updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "description": "Success message.",
                                            "type": "string",
                                            "example": "Payment status updated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code.",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code.",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/api/v1/professional-man/update-fcm-token": {
            "put": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Update FCM Token",
                "description": "Update the Firebase Cloud Messaging (FCM) token for push notifications.",
                "operationId": "updateFcmToken",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "fcm_token": {
                                        "description": "The FCM token to be updated.",
                                        "type": "string",
                                        "example": "your-fcm-token"
                                    },
                                    "token": {
                                        "description": "Authentication token of the professional man.",
                                        "type": "string",
                                        "example": "your-auth-token"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "FCM token updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "description": "Success message.",
                                            "type": "string",
                                            "example": "successfully updated!"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code.",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/api/v1/professional-man/notifications": {
            "get": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Get Notifications",
                "description": "Retrieve notifications for the authenticated professional man, including general and user-specific notifications from the past 7 days.",
                "operationId": "getNotifications",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Authentication token of the professional man.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "your-auth-token"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of notifications.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "description": "Notification ID.",
                                                "type": "integer"
                                            },
                                            "title": {
                                                "description": "Notification title.",
                                                "type": "string"
                                            },
                                            "message": {
                                                "description": "Notification message.",
                                                "type": "string"
                                            },
                                            "zone_id": {
                                                "description": "Zone ID for targeted notifications.",
                                                "type": "integer",
                                                "nullable": true
                                            },
                                            "target": {
                                                "description": "Target audience for the notification.",
                                                "type": "string"
                                            },
                                            "created_at": {
                                                "description": "Creation timestamp.",
                                                "type": "string",
                                                "format": "date-time"
                                            },
                                            "data": {
                                                "description": "Additional notification data.",
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized or invalid token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code.",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/api/v1/professional-man/remove-account": {
            "delete": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Remove Professional Man Account",
                "description": "Delete the authenticated professional man's account. If there are ongoing orders, the account cannot be deleted.",
                "operationId": "removeAccount",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Authentication token of the professional man.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "your-auth-token"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account successfully deleted."
                    },
                    "203": {
                        "description": "Account deletion warning due to ongoing orders.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code.",
                                                        "type": "string",
                                                        "example": "on-going"
                                                    },
                                                    "message": {
                                                        "description": "Error message.",
                                                        "type": "string",
                                                        "example": "User account delete warning"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized or invalid token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code.",
                                                        "type": "string"
                                                    },
                                                    "message": {
                                                        "description": "Error message.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/api/v1/professional-man/pm-shift": {
            "get": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Get Active Shift for Professional Man",
                "description": "Retrieve the active shift that matches the shift ID of the authenticated professional man.",
                "operationId": "getPmShift",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Authentication token of the professional man.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "your-auth-token"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of active shifts.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "description": "Shift ID",
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "description": "Shift name",
                                                "type": "string",
                                                "example": "Morning Shift"
                                            },
                                            "status": {
                                                "description": "Shift status",
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "created_at": {
                                                "description": "Creation timestamp",
                                                "type": "string",
                                                "example": "2025-01-01T00:00:00.000000Z"
                                            },
                                            "updated_at": {
                                                "description": "Update timestamp",
                                                "type": "string",
                                                "example": "2025-01-01T00:00:00.000000Z"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid token or validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code.",
                                                        "type": "string",
                                                        "example": "auth"
                                                    },
                                                    "message": {
                                                        "description": "Error message.",
                                                        "type": "string",
                                                        "example": "Invalid token"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/api/v1/professional-man/send-order-otp": {
            "put": {
                "tags": [
                    "Professional Man"
                ],
                "summary": "Send OTP for Order Completion",
                "description": "Sends OTP to the customer for order completion verification and triggers a push notification.",
                "operationId": "sendOrderOtp",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "Authentication token of the professional man.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "your-auth-token"
                        }
                    },
                    {
                        "name": "order_id",
                        "in": "query",
                        "description": "The ID of the order for which OTP needs to be sent.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 123
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP sent successfully and push notification triggered.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "OTP sent successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or push notification failure.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code.",
                                                        "type": "string",
                                                        "example": "order"
                                                    },
                                                    "message": {
                                                        "description": "Error message.",
                                                        "type": "string",
                                                        "example": "Order not found"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Order not found or not eligible for OTP.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "description": "Error code.",
                                                        "type": "string",
                                                        "example": "order"
                                                    },
                                                    "message": {
                                                        "description": "Error message.",
                                                        "type": "string",
                                                        "example": "Order not found"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/api/v1/customer/wish-list/add": {
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Add a service to the wishlist",
                "description": "Adds a service to the authenticated user's wishlist.",
                "operationId": "addToWishlist",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "service_id"
                                ],
                                "properties": {
                                    "service_id": {
                                        "description": "ID of the service to be added to the wishlist",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service added to wishlist successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Added to wish list"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "service_id"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The service_id field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Service already in wishlist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Already in wishlist"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/wish-list/remove": {
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Remove a service from the wishlist",
                "description": "Removes a service from the authenticated user's wishlist.",
                "operationId": "removeFromWishlist",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "service_id"
                                ],
                                "properties": {
                                    "service_id": {
                                        "description": "ID of the service to be removed from the wishlist",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service removed from wishlist successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Removed from wish list"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "service_id"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "The service_id field is required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found in wishlist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/customer/wish-list": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Get the wishlist of the authenticated user",
                "description": "Retrieves the wishlist of the authenticated user filtered by the provided zone ID(s).",
                "operationId": "getWishlist",
                "parameters": [
                    {
                        "name": "zoneId",
                        "in": "header",
                        "description": "Zone ID(s) to filter services. Can be a single ID or an array of IDs.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wishlist retrieved successfully"
                    },
                    "403": {
                        "description": "Zone ID is required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "zoneId"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Zone id is required!"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/zone/list": {
            "get": {
                "tags": [
                    "Zones"
                ],
                "summary": "Fetch zones",
                "description": "Fetches a list of all active zones with formatted coordinates.",
                "operationId": "ad770a3d768b7d9e58429fafe1d6533b",
                "responses": {
                    "200": {
                        "description": "List of zones.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "description": "Zone ID.",
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "name": {
                                                "description": "Zone name.",
                                                "type": "string",
                                                "example": "Zone 1"
                                            },
                                            "status": {
                                                "description": "Zone status (1 = active).",
                                                "type": "integer",
                                                "example": 1
                                            },
                                            "coordinates": {
                                                "description": "Original coordinates of the zone.",
                                                "type": "array",
                                                "items": {
                                                    "type": "object"
                                                }
                                            },
                                            "formated_coordinates": {
                                                "description": "Formatted coordinates of the zone.",
                                                "type": "array",
                                                "items": {
                                                    "properties": {
                                                        "latitude": {
                                                            "description": "Latitude.",
                                                            "type": "number",
                                                            "format": "float",
                                                            "example": -37.8136
                                                        },
                                                        "longitude": {
                                                            "description": "Longitude.",
                                                            "type": "number",
                                                            "format": "float",
                                                            "example": 144.9631
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "An error occurred while fetching zones."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/zone/check": {
            "get": {
                "tags": [
                    "Zones"
                ],
                "summary": "Check if coordinates are within a specific zone",
                "description": "Checks if the provided latitude and longitude are within the specified zone.",
                "operationId": "87ab6f8552eac845e2110c09b9c8ea7c",
                "parameters": [
                    {
                        "name": "lat",
                        "in": "query",
                        "description": "Latitude of the location to check.",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": "37.7749"
                        }
                    },
                    {
                        "name": "lng",
                        "in": "query",
                        "description": "Longitude of the location to check.",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float",
                            "example": "-122.4194"
                        }
                    },
                    {
                        "name": "zone_id",
                        "in": "query",
                        "description": "The ID of the zone to check.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns true if the coordinates are within the zone, otherwise false.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                },
                                "example": true
                            }
                        }
                    },
                    "403": {
                        "description": "Validation error or invalid parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "array",
                                            "items": {
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "example": "validation_error"
                                                    },
                                                    "message": {
                                                        "type": "string",
                                                        "example": "Latitude, Longitude, and Zone ID are required."
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "An error occurred while checking the zone."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "Customer Authentication",
            "description": "Customer Authentication"
        },
        {
            "name": "Professionalman authentication",
            "description": "Professionalman authentication"
        },
        {
            "name": "Customer social authentication",
            "description": "Customer social authentication"
        },
        {
            "name": "Banners",
            "description": "Banners"
        },
        {
            "name": "Categories",
            "description": "Categories"
        },
        {
            "name": "Configuration",
            "description": "Configuration"
        },
        {
            "name": "Customer",
            "description": "Customer"
        },
        {
            "name": "Professional Man",
            "description": "Professional Man"
        },
        {
            "name": "Newsletter",
            "description": "Newsletter"
        },
        {
            "name": "Order",
            "description": "Order"
        },
        {
            "name": "Products",
            "description": "Products"
        },
        {
            "name": "Customer Review for Professionalman",
            "description": "Customer Review for Professionalman"
        },
        {
            "name": "Zones",
            "description": "Zones"
        }
    ],
    "components": {
        "securitySchemes": {
            "bearer": {
                "type": "apiKey",
                "description": "Enter your token in the format **Bearer <token>**",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "security": [
        {
            "bearer": []
        }
    ]
}